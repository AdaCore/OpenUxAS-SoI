<?xml version="1.0" encoding="UTF-8"?>
<argument>
  <properties>
    <title>
      <![CDATA[New Argument]]>
    </title>
    <author>
      <![CDATA[]]>
    </author>
    <version>
      <![CDATA[]]>
    </version>
    <date>
      <![CDATA[]]>
    </date>
    <status>
      <![CDATA[]]>
    </status>
    <prefix>
      <![CDATA[]]>
    </prefix>
    <confidence>
      <![CDATA[false]]>
    </confidence>
    <note>
      <![CDATA[]]>
    </note>
  </properties>

  <gsn>
    <g
        id="__gsn__15d15364bdd"
        name="State Machine Correctness">
      All AGREE state machines are correct

      <s
          id="__gsn__15d153893ec"
          name="Strategy">
        Argue correctness of each component’s internal AGREE state machine representation

        <g
            id="__gsn__15d15389a52"
            repeat="true"
            name="{Component} State Machine">
          {Component} state agree state machine is correct.

          <c
              id="__gsn__15d18a60010"
              name="Context">
            {component FSM}
          </c>

          <s
              id="__gsn__15d1536fdc8"
              name="Strategy">
            Argue correctness of each characteristic of a \finite state machine

            <c
                id="__gsn__15d15452280"
                name="Context">
              {states}
            </c>

            <c
                id="__gsn__15d15450d67"
                name="Context">
              {transitions}
            </c>

            <c
                id="__gsn__15d15400fcd"
                name="Context">
              {start state}
            </c>

            <c
                id="__gsn__15d153e56c8"
                name="Context">
              {terminal states}
            </c>

            <g
                id="__gsn__15d1537066f"
                name="Correct States">
              {component} states are correct

              <s
                  id="__gsn__15d154ccff4"
                  name="Strategy">

                <g
                    id="__gsn__15d154cd3cc"
                    name="State Verification">

                  <comment
                      id="__gsn__15d18b996d6"
                      name="Rodes">
                    Underneath this claim, the argument could be supported by further decomposition i.e., the implementation.
                  </comment>
                </g>

                <g
                    id="__gsn__15d154cd6f8"
                    name="State Validation">

                  <c
                      id="__gsn__15d1567f890"
                      name="Context">
                    {correct}
                  </c>

                  <s
                      id="__gsn__15d15568763"
                      name="Strategy">

                    <g
                        id="__gsn__15d1556b7a2"
                        name="Behavior Correctness">
                    </g>
                  </s>

                  <comment
                      id="__gsn__15d17cd6497"
                      name="Rodes">
                    Should include checks that the state machine infrastructure is valid and properly applied (e.g., what if the int representation is accidentally repeated?).
                  </comment>
                </g>

                <comment
                    id="__gsn__15d1835bd64"
                    name="Rodes">
                  TODO: how do I address the possibility of screwing up the state infrastructure?
                </comment>
              </s>
            </g>

            <g
                id="__gsn__15d15372999"
                name="Correct Transitions">
              {Component} state machine transitions correctly between states

              <s
                  id="__gsn__15d154c50be"
                  name="Strategy">
                Argue by verification that {state transitions} ...

                <g
                    id="__gsn__15d154c61ae"
                    name="Transition Verification">
                  {TBD}

                  <s
                      id="__gsn__15d18a42a84"
                      name="Strategy">
                    {TBD}

                    <c
                        id="__gsn__15d18a82b3e"
                        name="Definition">
                      [Transition reachable]: a transition is reachable there exists a state machine execution path where the transition is taken.
                    </c>

                    <c
                        id="__gsn__15d18a5b696"
                        name="Definition">
                      [State reachability]: a given state is reachable if a state machine execution path exists by which the state is entered.
                    </c>

                    <m
                        id="__gsn__15d15568d83"
                        link="state_reachability.gsn"
                        name="Reachable {Component} States">
                      All states of {component} are reachable

                      <j
                          id="__gsn__15d18a686c4"
                          name="Justification">
                        Unreachable states may indicate an over-engineered architecture or an error in architecture design (i.e., an incorrectly specified finite state machine).
                      </j>
                    </m>

                    <g
                        id="__gsn__15d18b94a16"
                        name="Exclusive Reachable State Set">
                      No states are reachable other than {states}

                      <j
                          id="__gsn__15d18bee746"
                          name="Justification">
                        This is not the same as state “completeness”, but a check that the state machine can’t somehow transition to other undefined states. If it could, the state machine may be erroneous or other states exists that were not defined.
                      </j>
                    </g>

                    <m
                        id="__gsn__15d15565d04"
                        link="transition_reachability.gsn"
                        name="Reachable State Transitions">
                      All transitions between {component} states are reachable.

                      <j
                          id="__gsn__15d18a7de92"
                          name="Justification">
                        Unexecutable transition may indicate an over-engineered architecture or an error in architecture design (i.e., an incorrectly specified finite state machine).
                      </j>
                    </m>

                    <g
                        id="__gsn__15d18aba4ad"
                        name="Exclusive Transition Set">
                      No state transitions, other than {state transitions}, exist.

                      <j
                          id="__gsn__15d18b4345f"
                          name="Justification">
                        This is a separate concern from “completeness”. This claim asks whether the given set of transitions is the exclusive set of transitions. If another transition exists, it isn’t necessarily the state machine transitions are incomplete, but it could mean there is an error in the state machine.
                      </j>
                    </g>

                    <g
                        id="__gsn__15d190896a6"
                        name="Transition Guarantees Satisfied">
                      {implementation of the spec is correct?}

                      <s
                          id="__gsn__15d1909d5ca"
                          name="Strategy">
                        Argue over each transition

                        <g
                            id="__gsn__15d1909dae4"
                            repeat="true"
                            name="{Transition} Guarantee Satisfied">
                        </g>
                      </s>
                    </g>

                    <comment
                        id="__gsn__15d18f987de"
                        name="Rodes">
                      This strategy is effectively an enumeration over defined characteristics of “correct transition verification”.
                    </comment>
                  </s>
                </g>

                <g
                    id="__gsn__15d154c649f"
                    name="Transition Validation">
                  {tbd}

                  <c
                      id="__gsn__15d1567e0e0"
                      name="Context">
                    {correct}
                  </c>

                  <s
                      id="__gsn__15d1554ada3"
                      name="Strategy">
                    {TBD}

                    <g
                        id="__gsn__15d1554b5c3"
                        name="Correct State Connections">
                    </g>

                    <g
                        id="__gsn__15d1556e40a"
                        name="Correct Transition Behavior">
                    </g>

                    <g
                        id="__gsn__15d18ab40b3"
                        name="Complete Transition Set">

                      <comment
                          id="__gsn__15d18ae6aec"
                          name="Rodes">
                        There are no other transitions that should have been specified.
                      </comment>
                    </g>
                  </s>
                </g>

                <comment
                    id="__gsn__15d15526110"
                    name="Rodes">
                  TODO: Only transitions under specific transitions, the transitions are appropriate (connected to the right states), not erroneously specified
                </comment>
              </s>
            </g>

            <g
                id="__gsn__15d153738a0"
                name="Correct Start State">
              {Component} state machine is initialized at the correct start state.

              <s
                  id="__gsn__15d153ef2e8"
                  name="Strategy">
                Argue by verification that {start state} is the start state in the spec. and that  {start state} is the intended state machine start state.

                <j
                    id="__gsn__15d18299ceb"
                    name="Justification">
                  Correctness of the start state is determined by the spec actually initializing the state machine to the start state, and assessment that the given initialized start state is the intended start state. Further assessment of the correctness of the start state behavior is assessed in the state correctness claim.
                </j>

                <g
                    id="__gsn__15d153ef6b8"
                    name="Start State Verification">
                  {Component} start state is {start state}

                  <s
                      id="__gsn__15d153b18ec"
                      name="Evidence Scheme">
                    {AGREE lemma for start states  }

                    <c
                        id="__gsn__15d153b18ed"
                        name="Context">
                      {idiom documentation}
                    </c>

                    <e
                        id="__gsn__15d153b18ef"
                        name="Evidence">
                      {AGREE lemma proof}
                    </e>
                  </s>
                </g>

                <g
                    id="__gsn__15d153f0ef6"
                    name="Start State Validation">
                  {Component} {start state} is the intended start state.

                  <c
                      id="__gsn__15d1565bc9a"
                      name="Context">
                    {intended start state}
                  </c>

                  <s
                      id="__gsn__15d153a3958"
                      name="Evidence Scheme">
                    {manual inspection}

                    <e
                        id="__gsn__15d153a3959"
                        name="Evidence">
                      {inspection report and sign off}

                      <comment
                          id="__gsn__15d15419e64"
                          name="Rodes">
                        Must include consistency check with AADL or subdivide this argument to include AADL consistency as one assessment.
                      </comment>
                    </e>
                  </s>
                </g>
              </s>
            </g>

            <g
                id="__gsn__15d153748c8"
                name="Correct Terminal States">
              {Component} state machine terminates in the correct terminal states

              <s
                  id="__gsn__15d153ca91a"
                  optional="true"
                  name="Strategy">
                Argue by verification that {terminal states} are the only terminal states of the state machine spec and {terminal states} are complete.

                <j
                    id="__gsn__15d1824d2cf"
                    name="Justification">
                  Terminal state correctness is determined by determining the state machine can only terminate in the specified states and those states are complete. Further assessment of the correctness of the behavior of the states is assessed under the state correctness claim.
                </j>

                <g
                    id="__gsn__15d153cb420"
                    name="Terminal State Verification">
                  {Component} only terminates in {terminal states}

                  <s
                      id="__gsn__15d154f1546"
                      name="Evidence Scheme">
                    {AGREE lemma for terminal states  }

                    <c
                        id="__gsn__15d154f1547"
                        name="Context">
                      {idiom documentation}
                    </c>

                    <e
                        id="__gsn__15d154f1549"
                        name="Evidence">
                      {AGREE lemma proof}
                    </e>
                  </s>
                </g>

                <g
                    id="__gsn__15d1566f888"
                    name="Terminal States Completeness">
                  The set {terminal states} is complete

                  <s
                      id="__gsn__15d153d3e20"
                      name="Evidence Scheme">
                    {manual inspection}

                    <e
                        id="__gsn__15d153d3e21"
                        name="Evidence">
                      {inspection report and sign off}

                      <comment
                          id="__gsn__15d1544a690"
                          name="Rodes">
                        Must include consistency check with AADL or subdivide this argument to include AADL consistency as one assessment.
                      </comment>
                    </e>
                  </s>
                </g>
              </s>

              <s
                  id="__gsn__15d181f318b"
                  optional="true"
                  name="Evidence Scheme">
                {lack of terminal states}

                <e
                    id="__gsn__15d181fb400"
                    name="Evidence">
                  {the state machine has no terminal states}
                </e>
              </s>
            </g>

            <comment
                id="__gsn__15d183332a3"
                name="Rodes">
              Note: in general additional lemmas can be used to aid manual inspection: e.g., an inspection that the state machine as correct transition connections can have lemmas to assert start and end states on a transition. Another example: probing behavior of states with lemmas.
            </comment>
          </s>

          <comment
              id="__gsn__15d17eb2e23"
              name="Rodes">
            TODO: include a placeholder or note for the kind of validation that has been done with derek manually.
          </comment>
        </g>

        <g
            id="__gsn__15d183655c6"
            name="TBD">
          Use of the correct infrastructure for all components?
        </g>
      </s>

      <comment
          id="__gsn__15d18611afe"
          name="Rodes">
        TODO: argument should take into account we may have implementations in the future.
      </comment>
    </g>
  </gsn>
</argument>
