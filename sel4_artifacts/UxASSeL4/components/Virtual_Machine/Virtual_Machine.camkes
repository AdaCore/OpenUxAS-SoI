/**************************************************************************
  Copyright (c) 2013-2016 Rockwell Collins and the University of
  Minnesota. Developed with the sponsorship of the Defense Advanced
  Research Projects Agency (DARPA).

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this data, including any software or models
  in source or binary form, as well as any drawings,
  specifications, and documentation (collectively "the Data"), to
  deal in the Data without restriction, including without
  limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Data, and to
  permit persons to whom the Data is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Data.

  THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS, SPONSORS,
  DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE
  DATA.
 **************************************************************************/

/**************************************************************************

  ***AUTOGENERATED CODE: DO NOT MODIFY***

This header file contains the CAmkES component definition for the
AADL thread implementation Virtual_Machine.

 **************************************************************************/

import <std_connector.camkes>;
import <Timer.idl4>;
import <tb_Monitor_MissionSoftware__mission_impl_1.idl4>;
import <tb_Monitor_MissionSoftware__waypoint_impl_1.idl4>;


// Idl files for RPCs

import <gen_fwd.idl4>;

import "VM_shim/VM_shim.camkes";
import "VM/VM.camkes";

import <MissionSoftware__mission_impl_writer.idl4>;
import <MissionSoftware__waypoint_impl_writer.idl4>;

component Virtual_Machine {
    include <tb_soi_tk1_types.h>;
    uses tb_Monitor_MissionSoftware__mission_impl_1 tb_out_mission0;
    uses tb_Monitor_MissionSoftware__waypoint_impl_1 tb_in_waypoint;
    consumes QueuedData tb_in_waypoint_notification;

    uses gen_fwd_inf uartfwd;
    uses gen_fwd_inf clkcarfwd;

 composition {
        component VM vm_obj;
        component VM_shim vm_shim_obj;

        export vm_shim_obj.tb_out_mission -> tb_out_mission0;
        export vm_shim_obj.tb_in_waypoint -> tb_in_waypoint;
        export vm_shim_obj.tb_in_waypoint_notification -> tb_in_waypoint_notification;
        export vm_obj.uartfwd -> uartfwd;
        export vm_obj.clkcarfwd -> clkcarfwd;

        connection seL4SharedData mission(from vm_obj.mission, to vm_shim_obj.mission);
        connection seL4SharedData waypoint(from vm_shim_obj.waypoint, to vm_obj.waypoint);
        connection seL4Notification waypoint_notif(from vm_shim_obj.waypoint_notif, to vm_obj.waypoint_notif);
        connection seL4Notification mission_notif(from vm_obj.mission_notif, to vm_shim_obj.mission_notif);
    }   

  configuration {
        vm_obj.base_prio = 100;
        vm_obj.priority = 101;
        vm_shim_obj.priority = 103;

        vm_obj.untyped_mmios = [ 
            "0x50046000:12", // Interrupt Controller Virtual CPU interface (Virtual Machine view)
            "0x60004000:12", // Interrupt controller registers (ICTLR)
            "0x700b0000:12", // SDMMC-1, SDMMC-2, SDMMC-3, SDMMC-4,
            "0x7d000000:12", // USB on-the-go (micro)
            "0x7d004000:12", // USB on top board
            "0x7d008000:12", // USB on bottom board
            "0xb0000000:28", // Linux kernel memory regions
            "0xc0000000:29", // Linux kernel memory regions
            "0xe0000000:28", // Linux kernel memory regions
            ];

        vm_obj.irqs =  [
            27, // INTERRUPT_VGPT (INTERRUPT_PPI_11)
            53, // INTERRUPT_USB2
            63, // INTERRUPT_SDMMC4
            122, // INTERRUPT_UARTD
            129, // INTERRUPT_USB3
            ];

        vm_obj.smmu = [10, 23];

        vm_obj.asid_pool = true;

        vm_obj.simple = true;
        vm_obj.cnode_size_bits = 21; 
        vm_obj.simple_untyped24_pool = 10; 

    }

}
