Definitions uxas_types

Types:
  addressing_type is an enum {
    BROADCAST,
    RETURN_TO_SENDER
  }
  
  vehicle_id_set is an int[3]
  
  route_request_message is a record {
    id: int,
    vehicle_ids: vehicle_id_set
  }

//  route_request_message_set is an abstract /* set of route_request_message */

  route_request_message_set is a route_request_message[3]

  route_response_message is a record {
    id: int
  }
  
  route_plan_request_message is a record {
    id: int,
    vehicle_id: int
  }
  
  route_plan_request_message_set is a route_plan_request_message[3]

  route_plan_request_message_set_set is a route_plan_request_message_set[3]

  route_plan_response_message is a record {
    id:         int,
    addressing: addressing_type
  }
  
  route_plan_response_message_set is a route_plan_response_message[3]
  
  route_plan_response_message_set_set is a route_plan_response_message_set[3]
  
  route_request_map is a record {
    route_requests:           route_request_message_set,
    route_plan_request_sets:  route_plan_request_message_set_set,
    route_plan_response_sets: route_plan_response_message_set_set
  }
  
  abstract_message is an abstract


Constants:
  NULL_ROUTE_REQUEST is a route_request_message = 
    new route_request_message {
      id = 0,
      vehicle_ids = new vehicle_id_set[0,0,0]
    }
  
  NULL_ROUTE_REQUEST_SET is a route_request_message_set = 
    new route_request_message_set [
      NULL_ROUTE_REQUEST,
      NULL_ROUTE_REQUEST,
      NULL_ROUTE_REQUEST      
    ]

  NULL_ROUTE_RESPONSE is a route_response_message = 
    new route_response_message {
      id = 0
    }

  NULL_ROUTE_PLAN_REQUEST is a route_plan_request_message = 
    new route_plan_request_message { 
      id = 0 ,
      vehicle_id = 0
    }
    
  NULL_ROUTE_PLAN_REQUEST_SET is a route_plan_request_message_set = 
   new route_plan_request_message_set [
     NULL_ROUTE_PLAN_REQUEST,
     NULL_ROUTE_PLAN_REQUEST,
     NULL_ROUTE_PLAN_REQUEST
   ]
   
  NULL_ROUTE_PLAN_REQUEST_SET_SET is a route_plan_request_message_set_set =
    new route_plan_request_message_set_set [
      NULL_ROUTE_PLAN_REQUEST_SET,
      NULL_ROUTE_PLAN_REQUEST_SET,
      NULL_ROUTE_PLAN_REQUEST_SET      
    ]
       
  NULL_ROUTE_PLAN_RESPONSE is a route_plan_response_message = 
    new route_plan_response_message { 
      id         = 0, 
      addressing = BROADCAST
    }

  NULL_ROUTE_PLAN_RESPONSE_SET is a route_plan_response_message_set = 
   new route_plan_response_message_set [
     NULL_ROUTE_PLAN_RESPONSE,
     NULL_ROUTE_PLAN_RESPONSE,
     NULL_ROUTE_PLAN_RESPONSE
   ]
   
   NULL_ROUTE_PLAN_RESPONSE_SET_SET is a route_plan_response_message_set_set = 
    new route_plan_response_message_set_set [
      NULL_ROUTE_PLAN_RESPONSE_SET,
      NULL_ROUTE_PLAN_RESPONSE_SET,
      NULL_ROUTE_PLAN_RESPONSE_SET
    ]


Patterns:
  pattern generate_unique_id() returns (result: int) let
    result = 1 //(unique)
  tel

  /* --------------------------------------------------------------------------
   * 
   * [Complete] Abstractions for the route_request_message_set
   * 
   * --------------------------------------------------------------------------
   */
  pattern route_requests_full(set: route_request_message_set)
    returns (result: bool)
  let
    result = set[2] <> NULL_ROUTE_REQUEST
  tel
  
  pattern route_requests_empty(set: route_request_message_set)
    returns (result: bool)
  let
    result = set[0] == NULL_ROUTE_REQUEST
  tel
  
  pattern route_requests_size(set: route_request_message_set)
    returns (result: int)
  let
    result = if set[2] <> NULL_ROUTE_REQUEST then
               3
             else if set[1] <> NULL_ROUTE_REQUEST then
               2
             else if set[0] <> NULL_ROUTE_REQUEST then
               1
             else
               0
  tel
  
  pattern route_requests_include(set: route_request_message_set,
                                 msg: route_request_message)
    returns (result: bool)
  let
    result = set[2] == msg or set[1] == msg or set[0] == msg
  tel

  pattern insert_route_request(set: route_request_message_set,
                               msg: route_request_message)
    returns (result: route_request_message_set)
  let
    result = if route_requests_include(set, msg) then
               set
             else 
              if set[0] == NULL_ROUTE_REQUEST then
                new route_request_message_set [
                  msg,
                  NULL_ROUTE_REQUEST,
                  NULL_ROUTE_REQUEST
                ]
              else if set[1] == NULL_ROUTE_REQUEST then
                new route_request_message_set [
                  set[0],
                  msg,
                  NULL_ROUTE_REQUEST
                ]
                
              else if set[2] == NULL_ROUTE_REQUEST then
                new route_request_message_set [
                  set[0],
                  set[1],
                  msg
                ]
                
              else
                set
  tel
  
  pattern delete_route_request(set: route_request_message_set,
                               msg: route_request_message)
    returns (result: route_request_message_set)
  let
    result = if set[0] == msg then
               new route_request_message_set [
                 set[1], set[2], NULL_ROUTE_REQUEST
               ]
             else if set[1] == msg then
               new route_request_message_set [
                 set[0], set[2], NULL_ROUTE_REQUEST
               ]
             else if set[2] == msg then
               new route_request_message_set [
                 set[0], set[1], NULL_ROUTE_REQUEST
               ]
             else
               set
  tel
  
  
  /* --------------------------------------------------------------------------
   * 
   * [Partial] Abstractions for the route_plan_request_message_set
   * 
   * --------------------------------------------------------------------------
   */
  pattern route_plan_requests_include(set: route_plan_request_message_set,
                                      msg: route_plan_request_message)
    returns (result: bool)
  let
    result = set[2] == msg or set[1] == msg or set[0] == msg
  tel

  pattern insert_route_plan_request(set: route_plan_request_message_set,
                                    msg: route_plan_request_message)
    returns (result: route_plan_request_message_set)
  let
    result = if route_plan_requests_include(set, msg) then
               set
             else
              if set[0] == NULL_ROUTE_PLAN_REQUEST then
                new route_plan_request_message_set [
                  msg,
                  NULL_ROUTE_PLAN_REQUEST,
                  NULL_ROUTE_PLAN_REQUEST
                ]
              else if set[1] == NULL_ROUTE_PLAN_REQUEST then
                new route_plan_request_message_set [
                  set[0],
                  msg,
                  NULL_ROUTE_PLAN_REQUEST
                ]
                
              else if set[2] == NULL_ROUTE_PLAN_REQUEST then
                new route_plan_request_message_set [
                  set[0],
                  set[1],
                  msg
                ]
                
              else
                set
  tel
  

  /* --------------------------------------------------------------------------
   * 
   * [Partial] Abstractions for the route_plan_response_message_set
   * 
   * --------------------------------------------------------------------------
   */
  pattern route_plan_responses_full(set: route_plan_response_message_set)
    returns (result: bool)
  let
    result = set[2] <> NULL_ROUTE_PLAN_RESPONSE
  tel
  
  pattern route_plan_responses_include(set: route_plan_response_message_set,
                                       msg: route_plan_response_message)
    returns (result: bool)
  let
    result = set[2] == msg or set[1] == msg or set[0] == msg
  tel

  pattern insert_route_plan_response(set: route_plan_response_message_set,
                                     msg: route_plan_response_message)
    returns (result: route_plan_response_message_set)
  let
    result = if route_plan_responses_include(set, msg) then
               set
             else
              if set[0] == NULL_ROUTE_PLAN_RESPONSE then
                new route_plan_response_message_set [
                  msg,
                  NULL_ROUTE_PLAN_RESPONSE,
                  NULL_ROUTE_PLAN_RESPONSE
                ]
              else if set[1] == NULL_ROUTE_PLAN_RESPONSE then
                new route_plan_response_message_set [
                  set[0],
                  msg,
                  NULL_ROUTE_PLAN_RESPONSE
                ]
                
              else if set[2] == NULL_ROUTE_PLAN_RESPONSE then
                new route_plan_response_message_set [
                  set[0],
                  set[1],
                  msg
                ]
                
              else
                set
  tel
  
  /* --------------------------------------------------------------------------
   * 
   * [Partial] Abstractions for the route_request_map
   * 
   * --------------------------------------------------------------------------
   */
  pattern zeroed_request_map(map: route_request_map)
    returns (result: bool)
  let
    result = map.route_requests == NULL_ROUTE_REQUEST_SET and
             map.route_plan_request_sets == NULL_ROUTE_PLAN_REQUEST_SET_SET and
             map.route_plan_response_sets == NULL_ROUTE_PLAN_RESPONSE_SET_SET 
  tel
  
  pattern request_map_full(map: route_request_map)
    returns (result: bool)
  let
    result = map.route_requests[2] <> NULL_ROUTE_REQUEST
  tel 
   
  pattern request_map_empty(map: route_request_map)
    returns (result: bool)
  let
    result = map.route_requests[0] == NULL_ROUTE_REQUEST
  tel
  
  pattern request_map_include(map: route_request_map,
                              msg: route_request_message)
    returns (result: bool)
  let
    result = map.route_requests[2] == msg or 
             map.route_requests[1] == msg or 
             map.route_requests[0] == msg
  tel

  pattern insert_route_plan_requests(map: route_request_map,
                                     route_request: route_request_message,
                                     route_plan_requests: route_plan_request_message_set)
    returns (result: route_request_map)
  let
    result = if request_map_include(map, route_request) then
               map
             else 
               if map.route_requests[0] == NULL_ROUTE_REQUEST then
                 new route_request_map {
                   route_requests = new route_request_message_set [
                     route_request,
                     NULL_ROUTE_REQUEST,
                     NULL_ROUTE_REQUEST
                   ],
                   
                   route_plan_request_sets = new route_plan_request_message_set_set [
                     route_plan_requests,
                     NULL_ROUTE_PLAN_REQUEST_SET,
                     NULL_ROUTE_PLAN_REQUEST_SET
                   ],
                   
                   route_plan_response_sets = NULL_ROUTE_PLAN_RESPONSE_SET_SET
                 }
               
               else if map.route_requests[1] == NULL_ROUTE_REQUEST then
                 new route_request_map {
                   route_requests = new route_request_message_set [
                     map.route_requests[0],
                     route_request,
                     NULL_ROUTE_REQUEST
                   ],
                   
                   route_plan_request_sets = new route_plan_request_message_set_set [
                     map.route_plan_request_sets[0],
                     route_plan_requests,
                     NULL_ROUTE_PLAN_REQUEST_SET
                   ],
                   
                   route_plan_response_sets = new route_plan_response_message_set_set [
                     map.route_plan_response_sets[0],
                     NULL_ROUTE_PLAN_RESPONSE_SET,
                     NULL_ROUTE_PLAN_RESPONSE_SET  
                   ]
                 }
               
               else if map.route_requests[2] == NULL_ROUTE_REQUEST then
                 new route_request_map {
                   route_requests = new route_request_message_set [
                     map.route_requests[0],
                     map.route_requests[1],
                     route_request
                   ],
                   
                   route_plan_request_sets = new route_plan_request_message_set_set [
                     map.route_plan_request_sets[0],
                     map.route_plan_request_sets[1],
                     route_plan_requests
                   ],
                   
                   route_plan_response_sets = new route_plan_response_message_set_set [
                     map.route_plan_response_sets[0],
                     map.route_plan_response_sets[1],
                     NULL_ROUTE_PLAN_RESPONSE_SET  
                   ]
                 }
               
               else
                 map
  tel
  
  pattern insert_route_plan_response_into_map(map: route_request_map,
                                     route_request: route_request_message,
                                     route_plan_response: route_plan_response_message)
    returns (result: route_request_map)
  var
    response_sets: route_plan_response_message_set_set
  let
    response_sets = if map.route_requests[0] == route_request then
                      new route_plan_response_message_set_set [
                        insert_route_plan_response(map.route_plan_response_sets[0], 
                                                 route_plan_response),
                        map.route_plan_response_sets[1],
                        map.route_plan_response_sets[2]
                      ]
                    else if map.route_requests[1] == route_request then
                      new route_plan_response_message_set_set [
                        map.route_plan_response_sets[0],
                        insert_route_plan_response(map.route_plan_response_sets[1], 
                                                 route_plan_response),
                        map.route_plan_response_sets[2]
                      ]
                    else if map.route_requests[2] == route_request then
                      new route_plan_response_message_set_set [
                        map.route_plan_response_sets[0],
                        map.route_plan_response_sets[1],
                        insert_route_plan_response(map.route_plan_response_sets[2], 
                                                 route_plan_response)
                      ]
                    else
                      map.route_plan_response_sets
  
    result = new route_request_map {
      map.route_requests,
      map.route_plan_request_sets,
      response_sets
    }
  tel
  
  pattern delete_route_request_from_map(map: route_request_map,
                                        route_request: route_request_message)
    returns (result: route_request_map)
  let
    result = if map.route_requests[0] == route_request then
               new route_request_map {
                 route_requests = new route_request_message_set [
                   map.route_requests[1], 
                   map.route_requests[2], 
                   NULL_ROUTE_REQUEST
                 ],
                 
                 route_plan_request_sets = new route_plan_request_message_set_set [
                   map.route_plan_request_sets[1], 
                   map.route_plan_request_sets[2],
                   NULL_ROUTE_PLAN_REQUEST_SET 
                 ],
                 
                 route_plan_response_sets = new route_plan_response_message_set_set [
                   map.route_plan_response_sets[1],
                   map.route_plan_response_sets[2],
                   NULL_ROUTE_PLAN_RESPONSE_SET
                 ]
               }
             else if map.route_requests[1] == route_request then
               new route_request_map {
                 route_requests = new route_request_message_set [
                   map.route_requests[0], 
                   map.route_requests[2], 
                   NULL_ROUTE_REQUEST
                 ],
                 
                 route_plan_request_sets = new route_plan_request_message_set_set [
                   map.route_plan_request_sets[0], 
                   map.route_plan_request_sets[2],
                   NULL_ROUTE_PLAN_REQUEST_SET 
                 ],
                 
                 route_plan_response_sets = new route_plan_response_message_set_set [
                   map.route_plan_response_sets[0],
                   map.route_plan_response_sets[2],
                   NULL_ROUTE_PLAN_RESPONSE_SET
                 ]
               }
             else if map.route_requests[2] == route_request then
               new route_request_map {
                 route_requests = new route_request_message_set [
                   map.route_requests[0], 
                   map.route_requests[1], 
                   NULL_ROUTE_REQUEST
                 ],
                 
                 route_plan_request_sets = new route_plan_request_message_set_set [
                   map.route_plan_request_sets[0], 
                   map.route_plan_request_sets[1],
                   NULL_ROUTE_PLAN_REQUEST_SET 
                 ],
                 
                 route_plan_response_sets = new route_plan_response_message_set_set [
                   map.route_plan_response_sets[0],
                   map.route_plan_response_sets[1],
                   NULL_ROUTE_PLAN_RESPONSE_SET
                 ]
               }
             else
               map
  tel
  
  pattern get_route_request_for_response(map: route_request_map,
                                         response: route_plan_response_message)
    returns (result: route_request_message)
  let
    result = if map.route_plan_request_sets[0][0].id == response.id or
                map.route_plan_request_sets[0][1].id == response.id or
                map.route_plan_request_sets[0][2].id == response.id
              then
                map.route_requests[0]
                
              else if map.route_plan_request_sets[1][0].id == response.id or
                      map.route_plan_request_sets[1][1].id == response.id or
                      map.route_plan_request_sets[1][2].id == response.id
              then
                map.route_requests[1]
                
              else if map.route_plan_request_sets[2][0].id == response.id or
                      map.route_plan_request_sets[2][1].id == response.id or
                      map.route_plan_request_sets[2][2].id == response.id
              then
                map.route_requests[2]
                
              else
                NULL_ROUTE_REQUEST
  tel
  
  pattern get_route_plan_requests(map: route_request_map,
                                  route_request: route_request_message)
    returns (result: route_plan_request_message_set)
  let
    result = if map.route_requests[0] == route_request then
               map.route_plan_request_sets[0]
             else if map.route_requests[1] == route_request then
               map.route_plan_request_sets[1]
             else if map.route_requests[2] == route_request then
               map.route_plan_request_sets[2]
             else
               new route_plan_request_message_set [
                 NULL_ROUTE_PLAN_REQUEST,
                 NULL_ROUTE_PLAN_REQUEST,
                 NULL_ROUTE_PLAN_REQUEST
               ]
  tel