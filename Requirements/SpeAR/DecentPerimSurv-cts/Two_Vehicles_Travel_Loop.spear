Specification Two_Vehicles_Travel_Loop

Imports:
import "DecentPerimSurvDefs.spear"

Constants:
initial_pos_UAV1 : positionT = 0.0 m
initial_direction_UAV1 : signT = 1
initial_pos_UAV2 : positionT = 10.0 m
initial_direction_UAV2 : signT = -1

Inputs:

Outputs:
pos_UAV1 : positionT
pos_UAV2 : positionT

State:
direction_UAV1 : signT
direction_UAV2 : signT
time : timeT

Macros:

Assumptions:

Requirements:
//The next time is the previous time plus the minimum time until a decision/change is made.
// In the case of two vehicles following the full line, that is reaching an endpoint of the perimeter.
r0 : time == (0.0 s -> previous time + min_time(time_to_reach_endpoint(previous direction_UAV1, previous pos_UAV1),
											time_to_reach_endpoint(previous direction_UAV2, previous pos_UAV2)))

r1 : direction_UAV1 == (initial_direction_UAV1 ->
					if pos_UAV1 <= 0.0 m
					then 1
					else if pos_UAV1 >= P_global
							then -1
							else previous direction_UAV1)
	
r2 : pos_UAV1 == (initial_pos_UAV1 ->
						if previous direction_UAV1 == 1 
						then 
							previous pos_UAV1 + V*(time - previous time)
						else //direction == -1
							previous pos_UAV1 - V*(time - previous time))

r3 : direction_UAV2 == (initial_direction_UAV2 ->
					if pos_UAV2 <= 0.0 m
					then 1
					else if pos_UAV2 >= P_global
							then -1
							else previous direction_UAV2)
	
r4 : pos_UAV2 == (initial_pos_UAV2 ->
						if previous direction_UAV2 == 1 
						then 
							previous pos_UAV2 + V*(time - previous time)
						else //direction == -1
							previous pos_UAV2 - V*(time - previous time))
 
Properties:
o1 observe : time > 30.0 s

two_vehicles_travel_loop_stable : ((pos_UAV1 == 0.0 m and pos_UAV2 == P_global)
	or (pos_UAV1 == P_global and pos_UAV2 == 0.0 m))

