srcs_daidalus = ['src/ACCoRDConfig.cpp',
'src/AircraftState.cpp',
'src/AlertLevels.cpp',
'src/AlertThresholds.cpp',
'src/AziEquiProjection.cpp',
'src/BandsRange.cpp',
'src/BandsRegion.cpp',
'src/CD2D.cpp',
'src/CD3D.cpp',
'src/CD3DTable.cpp',
'src/CDCylinder.cpp',
'src/ColoredValue.cpp',
'src/ConflictData.cpp',
'src/Constants.cpp',
'src/CriteriaCore.cpp',
'src/CriticalVectors.cpp',
'src/CriticalVectors2D.cpp',
'src/Daidalus.cpp',
'src/DaidalusFileWalker.cpp',
'src/DCPAUrgencyStrategy.cpp',
'src/Detection3DParameterReader.cpp',
'src/Detection3DParameterWriter.cpp',
'src/ENUProjection.cpp',
'src/ErrorLog.cpp',
'src/FixedAircraftUrgencyStrategy.cpp',
'src/format.cpp',
'src/GreatCircle.cpp',
'src/Horizontal.cpp',
'src/Integerval.cpp',
'src/Interval.cpp',
'src/IntervalSet.cpp',
'src/KinematicAltBands.cpp',
'src/KinematicBands.cpp',
'src/KinematicBandsCore.cpp',
'src/KinematicBandsParameters.cpp',
'src/KinematicGsBands.cpp',
'src/KinematicIntegerBands.cpp',
'src/KinematicMultiBands.cpp',
'src/KinematicRealBands.cpp',
'src/Kinematics.cpp',
'src/KinematicsLatLon.cpp',
'src/KinematicTrkBands.cpp',
'src/KinematicVsBands.cpp',
'src/LatLonAlt.cpp',
'src/LossData.cpp',
'src/NavPoint.cpp',
'src/NoneUrgencyStrategy.cpp',
'src/OrthographicProjection.cpp',
'src/ParameterData.cpp',
'src/ParameterEntry.cpp',
'src/Point.cpp',
'src/Position.cpp',
'src/PositionUtil.cpp',
'src/ProjectedKinematics.cpp',
'src/Projection.cpp',
'src/SeparatedInput.cpp',
'src/SeparatedOutput.cpp',
'src/SequenceReader.cpp',
'src/SimpleNoPolarProjection.cpp',
'src/SimpleProjection.cpp',
'src/StateReader.cpp',
'src/StateVector.cpp',
'src/StateWriter.cpp',
'src/string_util.cpp',
'src/TangentLine.cpp',
'src/TCAS2D.cpp',
'src/TCAS3D.cpp',
'src/TCASTable.cpp',
'src/TrafficState.cpp',
'src/Units.cpp',
'src/Util.cpp',
'src/Vect2.cpp',
'src/Vect3.cpp',
'src/VectFuns.cpp',
'src/Velocity.cpp',
'src/Vertical.cpp',
'src/WCV_HZ.cpp',
'src/WCVTable.cpp',
'src/WCV_TAUMOD.cpp',
'src/WCV_TCOA.cpp',
'src/WCV_TCPA.cpp',
'src/WCV_TEP.cpp',
'src/WCV_tvar.cpp',
'src/WCV_VMOD.cpp',

]

incs_daidalus = include_directories('include')

cpp_args = []
cpp = meson.get_compiler('cpp')

if cpp.get_id() != 'msvc'
  cpp_args += [
    '-std=c++11',
    '-Wall',
  ]
endif

lib_daidalus = static_library(
  'daidalus',
  srcs_daidalus,
  cpp_args: cpp_args,
  include_directories: incs_daidalus,
)