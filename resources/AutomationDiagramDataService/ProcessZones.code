file << "#! /usr/bin/env python" << std::endl;
file << "" << std::endl;
file << "import xml.dom.minidom" << std::endl;
file << "import pandas as pd" << std::endl;
file << "import glob" << std::endl;
file << "import math \t# pi" << std::endl;
file << "# import the conversion module" << std::endl;
file << "import LocalCoords" << std::endl;
file << "" << std::endl;
file << "" << std::endl;
file << "def ProcessZone(zoneNode,zoneType):" << std::endl;
file << "\t# AbstractZone" << std::endl;
file << "\t# ZoneID - A globally unique reference number for this zone" << std::endl;
file << "\t# Label - Optional label for this zone" << std::endl;
file << "\t# Boundary - Geometry object describing the boundary. This boundary is 2-dimensional. " << std::endl;
file << "\t#\tThe zone boundary is defined as an extrusion of this boundary from MinAltitude to MaxAltitude." << std::endl;
file << "" << std::endl;
file << "\tzoneID = 0" << std::endl;
file << "\telements = zoneNode.getElementsByTagName('ZoneID')" << std::endl;
file << "\tif len(elements):" << std::endl;
file << "\t\tzoneID = int(elements[0].firstChild.data)" << std::endl;
file << "\tprint('zoneID[' + str(zoneID) + ']')" << std::endl;
file << "\tlabel = ''" << std::endl;
file << "\telements = zoneNode.getElementsByTagName('Label')" << std::endl;
file << "\tif len(elements):" << std::endl;
file << "\t\tlabel = str(elements[0].firstChild.data)" << std::endl;
file << "\tprint('label[' + str(label) + ']')" << std::endl;
file << "" << std::endl;
file << "\tboundaryPoints = []" << std::endl;
file << "\tboundaryNode = zoneNode.getElementsByTagName('Boundary')" << std::endl;
file << "\tprint('boundaryNode[' + str(boundaryNode[0].nodeName) + ']')" << std::endl;
file << "\tif len(boundaryNode):" << std::endl;
file << "\t\tcircleNode = boundaryNode[0].getElementsByTagName('Circle')" << std::endl;
file << "\t\tpolygonNode = boundaryNode[0].getElementsByTagName('Polygon')" << std::endl;
file << "\t\trectangleNode = boundaryNode[0].getElementsByTagName('Rectangle')" << std::endl;
file << "\t\t# print('boundaryNode[' + str(boundaryNode[0].firstChild) + ']')" << std::endl;
file << "\t\tboundaryType = str('Circle')" << std::endl;
file << "\t\tif len(circleNode):" << std::endl;
file << "\t\t\tcenterPointNode = circleNode[0].getElementsByTagName('CenterPoint')" << std::endl;
file << "\t\t\tlatitude = 0" << std::endl;
file << "\t\t\tlongitude = 0" << std::endl;
file << "\t\t\taltitude = 0" << std::endl;
file << "\t\t\tradius = 0" << std::endl;
file << "\t\t\tif len(centerPointNode):" << std::endl;
file << "\t\t\t\tlocation3DElements = centerPointNode[0].getElementsByTagName('Location3D')" << std::endl;
file << "\t\t\t\tif location3DElements:" << std::endl;
file << "\t\t\t\t\telements = location3DElements[0].getElementsByTagName('Latitude')" << std::endl;
file << "\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\tlatitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\t\telements = location3DElements[0].getElementsByTagName('Longitude')" << std::endl;
file << "\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\tlongitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\t\telements = location3DElements[0].getElementsByTagName('Altitude')" << std::endl;
file << "\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\taltitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\tradiusNode = circleNode[0].getElementsByTagName('Radius')" << std::endl;
file << "\t\t\tif len(radiusNode):" << std::endl;
file << "\t\t\t\tradius = float(radiusNode[0].firstChild.data)" << std::endl;
file << "\t\t\treload(LocalCoords)\t\t# reset the initialization coordinates" << std::endl;
file << "\t\t\tcenterNorthEast_m = LocalCoords.LatLong_degToNorthEast_m(latitude,longitude)" << std::endl;
file << "\t\t\theading = 0;" << std::endl;
file << "\t\t\theadingStep = math.pi/18;\t# 10 deg steps" << std::endl;
file << "\t\t\twhile heading < 2.0*math.pi:" << std::endl;
file << "\t\t\t\tnorth_m = radius*math.sin(heading) + centerNorthEast_m[0] " << std::endl;
file << "\t\t\t\teast_m = radius*math.cos(heading) + centerNorthEast_m[1] " << std::endl;
file << "\t\t\t\tboundaryPointLatLong = LocalCoords.NorthEast_mToLatLong_deg(north_m,east_m)" << std::endl;
file << "\t\t\t\tboundaryPoints.append([boundaryPointLatLong[0],boundaryPointLatLong[1],altitude])" << std::endl;
file << "\t\t\t\theading = heading + headingStep" << std::endl;
file << "\t\telif len(polygonNode):" << std::endl;
file << "\t\t\tlatitude = 0" << std::endl;
file << "\t\t\tlongitude = 0" << std::endl;
file << "\t\t\taltitude = 0" << std::endl;
file << "\t\t\tboundaryPointNodes = polygonNode[0].getElementsByTagName('BoundaryPoints')" << std::endl;
file << "\t\t\tif len(boundaryPointNodes):" << std::endl;
file << "\t\t\t\tlocation3DElements = boundaryPointNodes[0].getElementsByTagName('Location3D')" << std::endl;
file << "\t\t\t\tfor location3DElement in location3DElements:" << std::endl;
file << "\t\t\t\t\telements = location3DElement.getElementsByTagName('Latitude')" << std::endl;
file << "\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\tlatitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\t\telements = location3DElement.getElementsByTagName('Longitude')" << std::endl;
file << "\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\tlongitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\t\telements = location3DElement.getElementsByTagName('Altitude')" << std::endl;
file << "\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\taltitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\t\tboundaryPoints.append([latitude,longitude,altitude])" << std::endl;
file << "\t\telif len(rectangleNode):" << std::endl;
file << "\t\t\tprint('WARNING:: Rectangle boundary not implemented!!!')" << std::endl;
file << "\t\telse:" << std::endl;
file << "\t\t\tprint('ERROR:: Unknown boundary area type[' + boundaryType +'] encountered!!!')" << std::endl;
file << "\tboundaryPd = pd.DataFrame(data = boundaryPoints,columns=['latitude','longitude','altitude'])" << std::endl;
file << "\treturn [zoneID,label,zoneType,boundaryPd]" << std::endl;
file << "" << std::endl;
file << "" << std::endl;
file << "def ProcessZoneFile(filename):" << std::endl;
file << "" << std::endl;
file << "\tzones = []" << std::endl;
file << "\tdoc2 = xml.dom.minidom.parse(filename)" << std::endl;
file << "\tif doc2.hasChildNodes():" << std::endl;
file << "\t\tisGoodMessage = True" << std::endl;
file << "\t\tzoneNode = doc2.firstChild" << std::endl;
file << "\t\tzoneType = ''" << std::endl;
file << "\t\tif str(zoneNode.nodeName) == 'KeepInZone':" << std::endl;
file << "\t\t\tzoneType = 'KeepInZone'" << std::endl;
file << "\t\telif str(zoneNode.nodeName) == 'KeepOutZone':" << std::endl;
file << "\t\t\tzoneType = 'KeepOutZone'" << std::endl;
file << "\t\telse:" << std::endl;
file << "\t\t\tprint('ERROR:: Unknown zone type[' + str(zoneNode.nodeName) +'] encountered!!!')" << std::endl;
file << "\t\t\tisGoodMessage = False" << std::endl;
file << "\t\tif isGoodMessage:" << std::endl;
file << "\t\t\tzones.append(ProcessZone(zoneNode,zoneType))" << std::endl;
file << "\treturn zones" << std::endl;
file << "" << std::endl;
file << "def main():" << std::endl;
file << "\tzoneArray = []" << std::endl;
file << "\tfor zoneFile in glob.glob('ZoneKeep*'):" << std::endl;
file << "\t\tprint('loading [' + zoneFile + ']')" << std::endl;
file << "\t\tzoneArray.extend(ProcessZoneFile(zoneFile))" << std::endl;
file << "\tzoneArrayPd = pd.DataFrame(data = zoneArray,columns=['zoneID','label','zoneType','boundaryPd'])" << std::endl;
file << "\tprint('saving [Zones.pkl]')" << std::endl;
file << "\tzoneArrayPd.to_pickle('Zones.pkl')" << std::endl;
file << "" << std::endl;
file << "if __name__ == '__main__':" << std::endl;
file << "    main()" << std::endl;
