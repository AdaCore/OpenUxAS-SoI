file << "#! /usr/bin/env python" << std::endl;
file << "" << std::endl;
file << "import xml.dom.minidom" << std::endl;
file << "import pandas as pd" << std::endl;
file << "import glob" << std::endl;
file << "import math \t# pi" << std::endl;
file << "import re \t# regular expression" << std::endl;
file << "# import the conversion module" << std::endl;
file << "import LocalCoords" << std::endl;
file << "" << std::endl;
file << "" << std::endl;
file << "def ProcessAngledAreaSearchTask(angledAreaSearchTaskNode):" << std::endl;
file << "\ttaskID = 0" << std::endl;
file << "\telements = angledAreaSearchTaskNode.getElementsByTagName('TaskID')" << std::endl;
file << "\tif elements and elements[0].childNodes:" << std::endl;
file << "\t\ttaskID = int(elements[0].firstChild.data)" << std::endl;
file << "\tlabel = ''" << std::endl;
file << "\telements = angledAreaSearchTaskNode.getElementsByTagName('Label')" << std::endl;
file << "\tif elements and elements[0].childNodes:" << std::endl;
file << "\t\tlabel = str(elements[0].firstChild.data)" << std::endl;
file << "\tprint('taskID[{0}], label[{1}]'.format(taskID,label))" << std::endl;
file << "\tsearchAreaPoints = []" << std::endl;
file << "\tstartPointNode = angledAreaSearchTaskNode.getElementsByTagName('StartPoint')" << std::endl;
file << "\tif len(startPointNode):" << std::endl;
file << "\t\tpointsNode = startPointNode[0].getElementsByTagName('Location3D')" << std::endl;
file << "\t\tif len(pointsNode):" << std::endl;
file << "\t\t\tlatitude = 0.0" << std::endl;
file << "\t\t\tlongitude = 0.0" << std::endl;
file << "\t\t\taltitude = 0.0" << std::endl;
file << "\t\t\telements = pointsNode[0].getElementsByTagName('Latitude')" << std::endl;
file << "\t\t\tif elements:" << std::endl;
file << "\t\t\t\tlatitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\telements = pointsNode[0].getElementsByTagName('Longitude')" << std::endl;
file << "\t\t\tif elements:" << std::endl;
file << "\t\t\t\tlongitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\telements = pointsNode[0].getElementsByTagName('Altitude')" << std::endl;
file << "\t\t\tif elements:" << std::endl;
file << "\t\t\t\taltitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\tsearchAreaPoints.append([latitude,longitude,altitude])" << std::endl;
file << "\tsearchAreaId = 0" << std::endl;
file << "\tsearchAreaIdNode = angledAreaSearchTaskNode.getElementsByTagName('SearchAreaID')" << std::endl;
file << "\tif len(searchAreaIdNode):" << std::endl;
file << "\t\tsearchAreaId = int(searchAreaIdNode[0].firstChild.data)" << std::endl;
file << "\t\t# find the area of interest" << std::endl;
file << "\t\tisFoundFile = False" << std::endl;
file << "\t\tfor areaOfInterestFile in glob.glob('AreaOfInterest_Id*'):" << std::endl;
file << "\t\t\t#\tAreaOfInterest_Id_100.xml" << std::endl;
file << "\t\t\tfileId = int(re.search(r'\\d+',areaOfInterestFile).group())" << std::endl;
file << "\t\t\tif fileId == searchAreaId:" << std::endl;
file << "\t\t\t\tisFoundFile = True" << std::endl;
file << "\t\t\t\tdocFileId = xml.dom.minidom.parse(areaOfInterestFile)" << std::endl;
file << "\t\t\t\tif docFileId.hasChildNodes():" << std::endl;
file << "\t\t\t\t\tfileNode = docFileId.firstChild" << std::endl;
file << "\t\t\t\t\tareaNode = fileNode.getElementsByTagName('Area')" << std::endl;
file << "\t\t\t\t\t# print('areaNode[' + str(areaNode[0].nodeName) + ']')" << std::endl;
file << "\t\t\t\t\tif len(areaNode):" << std::endl;
file << "\t\t\t\t\t\tcircleNode = areaNode[0].getElementsByTagName('Circle')" << std::endl;
file << "\t\t\t\t\t\tpolygonNode = areaNode[0].getElementsByTagName('Polygon')" << std::endl;
file << "\t\t\t\t\t\trectangleNode = areaNode[0].getElementsByTagName('Rectangle')" << std::endl;
file << "\t\t\t\t\t\t# print('searchAreaNode[' + str(searchAreaNode[0].firstChild) + ']')" << std::endl;
file << "\t\t\t\t\t\tsearchAreaType = str('Circle')" << std::endl;
file << "\t\t\t\t\t\tif len(circleNode):" << std::endl;
file << "\t\t\t\t\t\t\tcenterPointNode = circleNode[0].getElementsByTagName('CenterPoint')" << std::endl;
file << "\t\t\t\t\t\t\tlatitude = 0" << std::endl;
file << "\t\t\t\t\t\t\tlongitude = 0" << std::endl;
file << "\t\t\t\t\t\t\taltitude = 0" << std::endl;
file << "\t\t\t\t\t\t\tradius = 0" << std::endl;
file << "\t\t\t\t\t\t\tif len(centerPointNode):" << std::endl;
file << "\t\t\t\t\t\t\t\tlocation3DElements = centerPointNode[0].getElementsByTagName('Location3D')" << std::endl;
file << "\t\t\t\t\t\t\t\tif location3DElements:" << std::endl;
file << "\t\t\t\t\t\t\t\t\telements = location3DElements[0].getElementsByTagName('Latitude')" << std::endl;
file << "\t\t\t\t\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\t\t\t\t\tlatitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\t\t\t\t\t\telements = location3DElements[0].getElementsByTagName('Longitude')" << std::endl;
file << "\t\t\t\t\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\t\t\t\t\tlongitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\t\t\t\t\t\telements = location3DElements[0].getElementsByTagName('Altitude')" << std::endl;
file << "\t\t\t\t\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\t\t\t\t\taltitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\t\t\t\tradiusNode = circleNode[0].getElementsByTagName('Radius')" << std::endl;
file << "\t\t\t\t\t\t\tif len(radiusNode):" << std::endl;
file << "\t\t\t\t\t\t\t\tradius = float(radiusNode[0].firstChild.data)" << std::endl;
file << "\t\t\t\t\t\t\tcenterNorthEast_m = LocalCoords.LatLong_degToNorthEast_m(latitude,longitude)" << std::endl;
file << "\t\t\t\t\t\t\theading = 0;" << std::endl;
file << "\t\t\t\t\t\t\theadingStep = math.pi/18;\t# 10 deg steps" << std::endl;
file << "\t\t\t\t\t\t\twhile heading < 2.0*math.pi:" << std::endl;
file << "\t\t\t\t\t\t\t\tnorth_m = radius*math.sin(heading) + centerNorthEast_m[0] " << std::endl;
file << "\t\t\t\t\t\t\t\teast_m = radius*math.cos(heading) + centerNorthEast_m[1] " << std::endl;
file << "\t\t\t\t\t\t\t\tsearchPointLatLong = LocalCoords.NorthEast_mToLatLong_deg(north_m,east_m)" << std::endl;
file << "\t\t\t\t\t\t\t\tsearchAreaPoints.append([searchPointLatLong[0],searchPointLatLong[1],altitude])" << std::endl;
file << "\t\t\t\t\t\t\t\theading = heading + headingStep" << std::endl;
file << "\t\t\t\t\t\telif len(polygonNode):" << std::endl;
file << "\t\t\t\t\t\t\tprint('WARNING:: Polygon search not implemented!!!')" << std::endl;
file << "\t\t\t\t\t\telif len(rectangleNode):" << std::endl;
file << "\t\t\t\t\t\t\tprint('WARNING:: Rectangle search not implemented!!!')" << std::endl;
file << "\t\t\t\t\t\telse:" << std::endl;
file << "\t\t\t\t\t\t\tprint('ERROR:: Unknown search area type[' + searchAreaType +'] encountered!!!')" << std::endl;
file << "\t\t\t\t\t\tif not isFoundFile:" << std::endl;
file << "\t\t\t\t\t\t\tprint('ERROR:: AngledAreaSearchTask could not find AreaOfInterest File for Id[' + str(searchAreaId) + '!!!')" << std::endl;
file << "" << std::endl;
file << "\telse:" << std::endl;
file << "\t\tprint('ERROR:: AngledAreaSearchTask could not parse SearchAreaID!!!')" << std::endl;
file << "" << std::endl;
file << "\t" << std::endl;
file << "\tsearchAreaLocationPd = pd.DataFrame(data = searchAreaPoints,columns=['latitude','longitude','altitude'])" << std::endl;
file << "\treturn [taskID,label,searchAreaLocationPd]" << std::endl;
file << "" << std::endl;
file << "" << std::endl;
file << "def ProcessWatchTask(watchTaskNode):" << std::endl;
file << "\ttaskID = 0" << std::endl;
file << "\telements = watchTaskNode.getElementsByTagName('TaskID')" << std::endl;
file << "\tif elements and elements[0].childNodes:" << std::endl;
file << "\t\ttaskID = int(elements[0].firstChild.data)" << std::endl;
file << "\tlabel = ''" << std::endl;
file << "\telements = watchTaskNode.getElementsByTagName('Label')" << std::endl;
file << "\tif elements and elements[0].childNodes:" << std::endl;
file << "\t\tlabel = str(elements[0].firstChild.data)" << std::endl;
file << "\tprint('taskID[{0}], label[{1}]'.format(taskID,label))" << std::endl;
file << "" << std::endl;
file << "" << std::endl;
file << "\twatchedEntityLocation = []" << std::endl;
file << "\twatchedEntityID = 0" << std::endl;
file << "\twatchedEntityIDNode = watchTaskNode.getElementsByTagName('WatchedEntityID')" << std::endl;
file << "\tif len(watchedEntityIDNode):" << std::endl;
file << "\t\twatchedEntityID = int(watchedEntityIDNode[0].firstChild.data)" << std::endl;
file << "\tif watchedEntityID > 0:" << std::endl;
file << "\t\t# find the point of interest" << std::endl;
file << "\t\tisFoundFile = False" << std::endl;
file << "\t\tfor entityStateFile in glob.glob('WatchedEntity_Id*'):" << std::endl;
file << "\t\t\t#\tWatchedEntity_Id_1002.xml" << std::endl;
file << "\t\t\tfileId = int(re.search(r'\\d+',entityStateFile).group())" << std::endl;
file << "\t\t\tif fileId == watchedEntityID:" << std::endl;
file << "\t\t\t\tisFoundFile = True" << std::endl;
file << "\t\t\t\tdocFileId = xml.dom.minidom.parse(entityStateFile)" << std::endl;
file << "\t\t\t\tif docFileId.hasChildNodes():" << std::endl;
file << "\t\t\t\t\tfileNode = docFileId.firstChild" << std::endl;
file << "\t\t\t\t\tlocationNode = fileNode.getElementsByTagName('Location')" << std::endl;
file << "\t\t\t\t\tif len(locationNode):" << std::endl;
file << "\t\t\t\t\t\tpointsNode = locationNode[0].getElementsByTagName('Location3D')" << std::endl;
file << "\t\t\t\t\t\tif len(pointsNode):" << std::endl;
file << "\t\t\t\t\t\t\tlatitude = 0.0" << std::endl;
file << "\t\t\t\t\t\t\tlongitude = 0.0" << std::endl;
file << "\t\t\t\t\t\t\taltitude = 0.0" << std::endl;
file << "\t\t\t\t\t\t\telements = pointsNode[0].getElementsByTagName('Latitude')" << std::endl;
file << "\t\t\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\t\t\tlatitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\t\t\t\telements = pointsNode[0].getElementsByTagName('Longitude')" << std::endl;
file << "\t\t\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\t\t\tlongitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\t\t\t\telements = pointsNode[0].getElementsByTagName('Altitude')" << std::endl;
file << "\t\t\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\t\t\taltitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\t\t\t\twatchedEntityLocation.append([latitude,longitude,altitude])" << std::endl;
file << "\t\t\t\t\t\telse:" << std::endl;
file << "\t\t\t\t\t\t\tprint('ERROR:: processing [' + entityStateFile +'] !!!')" << std::endl;
file << "\t\t\t\t\telse:\t\t" << std::endl;
file << "\t\t\t\t\t\tprint('ERROR:: processing [' + entityStateFile +'] !!!')" << std::endl;
file << "\t\t\t\telse:" << std::endl;
file << "\t\t\t\t\tprint('ERROR:: processing [' + entityStateFile +'] !!!')" << std::endl;
file << "\t\t\t\tbreak" << std::endl;
file << "\telse:" << std::endl;
file << "\t\twatchedEntityLocationNode = patternSearchTaskNode.getElementsByTagName('SearchLocation')" << std::endl;
file << "\t\tif len(watchedEntityLocationNode):" << std::endl;
file << "\t\t\tpointsNode = watchedEntityLocationNode[0].getElementsByTagName('Location3D')" << std::endl;
file << "\t\t\tif len(pointsNode):" << std::endl;
file << "\t\t\t\tlatitude = 0.0" << std::endl;
file << "\t\t\t\tlongitude = 0.0" << std::endl;
file << "\t\t\t\taltitude = 0.0" << std::endl;
file << "\t\t\t\telements = pointsNode[0].getElementsByTagName('Latitude')" << std::endl;
file << "\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\tlatitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\telements = pointsNode[0].getElementsByTagName('Longitude')" << std::endl;
file << "\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\tlongitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\telements = pointsNode[0].getElementsByTagName('Altitude')" << std::endl;
file << "\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\taltitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\twatchedEntityLocation.append([latitude,longitude,altitude])" << std::endl;
file << "" << std::endl;
file << "\twatchedEntityLocationPd = pd.DataFrame(data = watchedEntityLocation,columns=['latitude','longitude','altitude'])" << std::endl;
file << "\t# print('RESULT:: ProcessImpactPointSearchTask->watchedEntityLocationPd [' + str(watchedEntityLocationPd) +'] !!!')" << std::endl;
file << "\treturn [taskID,label,watchedEntityLocationPd]" << std::endl;
file << "" << std::endl;
file << "def ProcessImpactPointSearchTask(impactPointSearchTaskNode):" << std::endl;
file << "\ttaskID = 0" << std::endl;
file << "\telements = impactPointSearchTaskNode.getElementsByTagName('TaskID')" << std::endl;
file << "\tif elements and elements[0].childNodes:" << std::endl;
file << "\t\ttaskID = int(elements[0].firstChild.data)" << std::endl;
file << "\tlabel = ''" << std::endl;
file << "\telements = impactPointSearchTaskNode.getElementsByTagName('Label')" << std::endl;
file << "\tif elements and elements[0].childNodes:" << std::endl;
file << "\t\tlabel = str(elements[0].firstChild.data)" << std::endl;
file << "\tprint('taskID[{0}], label[{1}]'.format(taskID,label))" << std::endl;
file << "" << std::endl;
file << "" << std::endl;
file << "\tsearchLocation = []" << std::endl;
file << "\tsearchLocationID = 0" << std::endl;
file << "\tsearchLocationIDNode = impactPointSearchTaskNode.getElementsByTagName('SearchLocationID')" << std::endl;
file << "\tif len(searchLocationIDNode):" << std::endl;
file << "\t\tsearchLocationID = int(searchLocationIDNode[0].firstChild.data)" << std::endl;
file << "\tif searchLocationID > 0:" << std::endl;
file << "\t\t# find the point of interest" << std::endl;
file << "\t\tisFoundFile = False" << std::endl;
file << "\t\tfor pointOfInterestFile in glob.glob('PointOfInterest_Id*'):" << std::endl;
file << "\t\t\t#\tPointOfInterest_Id_102.xml" << std::endl;
file << "\t\t\tfileId = int(re.search(r'\\d+',pointOfInterestFile).group())" << std::endl;
file << "\t\t\tif fileId == searchLocationID:" << std::endl;
file << "\t\t\t\tisFoundFile = True" << std::endl;
file << "\t\t\t\tdocFileId = xml.dom.minidom.parse(pointOfInterestFile)" << std::endl;
file << "\t\t\t\tif docFileId.hasChildNodes():" << std::endl;
file << "\t\t\t\t\tfileNode = docFileId.firstChild" << std::endl;
file << "\t\t\t\t\tlocationNode = fileNode.getElementsByTagName('Location')" << std::endl;
file << "\t\t\t\t\tif len(locationNode):" << std::endl;
file << "\t\t\t\t\t\tpointsNode = locationNode[0].getElementsByTagName('Location3D')" << std::endl;
file << "\t\t\t\t\t\tif len(pointsNode):" << std::endl;
file << "\t\t\t\t\t\t\tlatitude = 0.0" << std::endl;
file << "\t\t\t\t\t\t\tlongitude = 0.0" << std::endl;
file << "\t\t\t\t\t\t\taltitude = 0.0" << std::endl;
file << "\t\t\t\t\t\t\telements = pointsNode[0].getElementsByTagName('Latitude')" << std::endl;
file << "\t\t\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\t\t\tlatitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\t\t\t\telements = pointsNode[0].getElementsByTagName('Longitude')" << std::endl;
file << "\t\t\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\t\t\tlongitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\t\t\t\telements = pointsNode[0].getElementsByTagName('Altitude')" << std::endl;
file << "\t\t\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\t\t\taltitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\t\t\t\tsearchLocation.append([latitude,longitude,altitude])" << std::endl;
file << "\t\t\t\t\t\telse:" << std::endl;
file << "\t\t\t\t\t\t\tprint('ERROR:: processing [' + pointOfInterestFile +'] !!!')" << std::endl;
file << "\t\t\t\t\telse:\t\t" << std::endl;
file << "\t\t\t\t\t\tprint('ERROR:: processing [' + pointOfInterestFile +'] !!!')" << std::endl;
file << "\t\t\t\telse:" << std::endl;
file << "\t\t\t\t\tprint('ERROR:: processing [' + pointOfInterestFile +'] !!!')" << std::endl;
file << "\t\t\t\tbreak" << std::endl;
file << "\telse:" << std::endl;
file << "\t\tsearchLocationNode = impactPointSearchTaskNode.getElementsByTagName('SearchLocation')" << std::endl;
file << "\t\tif len(searchLocationNode):" << std::endl;
file << "\t\t\tpointsNode = searchLocationNode[0].getElementsByTagName('Location3D')" << std::endl;
file << "\t\t\tif len(pointsNode):" << std::endl;
file << "\t\t\t\tlatitude = 0.0" << std::endl;
file << "\t\t\t\tlongitude = 0.0" << std::endl;
file << "\t\t\t\taltitude = 0.0" << std::endl;
file << "\t\t\t\telements = pointsNode[0].getElementsByTagName('Latitude')" << std::endl;
file << "\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\tlatitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\telements = pointsNode[0].getElementsByTagName('Longitude')" << std::endl;
file << "\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\tlongitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\telements = pointsNode[0].getElementsByTagName('Altitude')" << std::endl;
file << "\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\taltitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\tsearchLocation.append([latitude,longitude,altitude])" << std::endl;
file << "" << std::endl;
file << "\tsearchLocationPd = pd.DataFrame(data = searchLocation,columns=['latitude','longitude','altitude'])" << std::endl;
file << "\t# print('RESULT:: ProcessImpactPointSearchTask->searchLocationPd [' + str(searchLocationPd) +'] !!!')" << std::endl;
file << "\treturn [taskID,label,searchLocationPd]" << std::endl;
file << "" << std::endl;
file << "" << std::endl;
file << "def ProcessImpactLineSearchTask(impactLineSearchTaskNode):" << std::endl;
file << "\ttaskID = 0" << std::endl;
file << "\telements = impactLineSearchTaskNode.getElementsByTagName('TaskID')" << std::endl;
file << "\tif elements and elements[0].childNodes:" << std::endl;
file << "\t\ttaskID = int(elements[0].firstChild.data)" << std::endl;
file << "\tlabel = ''" << std::endl;
file << "\telements = impactLineSearchTaskNode.getElementsByTagName('Label')" << std::endl;
file << "\tif elements and elements[0].childNodes:" << std::endl;
file << "\t\tlabel = str(elements[0].firstChild.data)" << std::endl;
file << "\tprint('taskID[{0}], label[{1}]'.format(taskID,label))" << std::endl;
file << "" << std::endl;
file << "\tpointList = []" << std::endl;
file << "\tlineId = 0" << std::endl;
file << "\tlineIdNode = impactLineSearchTaskNode.getElementsByTagName('LineID')" << std::endl;
file << "\tif len(lineIdNode):" << std::endl;
file << "\t\tlineId = int(lineIdNode[0].firstChild.data)" << std::endl;
file << "\t\t# find the line of interest" << std::endl;
file << "\t\tisFoundFile = False" << std::endl;
file << "\t\tfor lineOfInterestFile in glob.glob('LineOfInterest_Id*'):" << std::endl;
file << "\t\t\t#\tLineOfInterest_Id_101.xml" << std::endl;
file << "\t\t\tfileId = int(re.search(r'\\d+',lineOfInterestFile).group())" << std::endl;
file << "\t\t\tif fileId == lineId:" << std::endl;
file << "\t\t\t\tisFoundFile = True" << std::endl;
file << "\t\t\t\tdocFileId = xml.dom.minidom.parse(lineOfInterestFile)" << std::endl;
file << "\t\t\t\tif docFileId.hasChildNodes():" << std::endl;
file << "\t\t\t\t\tfileNode = docFileId.firstChild" << std::endl;
file << "\t\t\t\t\tpointListNode = fileNode.getElementsByTagName('Line')" << std::endl;
file << "\t\t\t\t\t# print('pointListNode[' + str(pointListNode[0].nodeName) + ']')" << std::endl;
file << "\t\t\t\t\tif len(pointListNode):" << std::endl;
file << "\t\t\t\t\t\tpointsNode = pointListNode[0].getElementsByTagName('Location3D')" << std::endl;
file << "\t\t\t\t\t\tfor point in pointsNode:" << std::endl;
file << "\t\t\t\t\t\t\tlatitude = 0.0" << std::endl;
file << "\t\t\t\t\t\t\tlongitude = 0.0" << std::endl;
file << "\t\t\t\t\t\t\taltitude = 0.0" << std::endl;
file << "\t\t\t\t\t\t\tif point:" << std::endl;
file << "\t\t\t\t\t\t\t\telements = point.getElementsByTagName('Latitude')" << std::endl;
file << "\t\t\t\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\t\t\t\tlatitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\t\t\t\t\telements = point.getElementsByTagName('Longitude')" << std::endl;
file << "\t\t\t\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\t\t\t\tlongitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\t\t\t\t\telements = point.getElementsByTagName('Altitude')" << std::endl;
file << "\t\t\t\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\t\t\t\taltitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\t\t\t\tpointList.append([latitude,longitude,altitude])" << std::endl;
file << "\t\tif not isFoundFile:" << std::endl;
file << "\t\t\tprint('ERROR:: ImpactLineSearchTask could not find LineOfInterest File for Id[' + str(lineId) + '!!!')" << std::endl;
file << "" << std::endl;
file << "\telse:" << std::endl;
file << "\t\tprint('ERROR:: ImpactLineSearchTask could not parse LineID!!!')" << std::endl;
file << "" << std::endl;
file << "\tpointListPd = pd.DataFrame(data = pointList,columns=['latitude','longitude','altitude'])" << std::endl;
file << "\treturn [taskID,label,pointListPd]" << std::endl;
file << "" << std::endl;
file << "" << std::endl;
file << "def ProcessPatternSearchTask(patternSearchTaskNode):" << std::endl;
file << "\ttaskID = 0" << std::endl;
file << "\telements = patternSearchTaskNode.getElementsByTagName('TaskID')" << std::endl;
file << "\tif elements and elements[0].childNodes:" << std::endl;
file << "\t\ttaskID = int(elements[0].firstChild.data)" << std::endl;
file << "\tlabel = ''" << std::endl;
file << "\telements = patternSearchTaskNode.getElementsByTagName('Label')" << std::endl;
file << "\tif elements and elements[0].childNodes:" << std::endl;
file << "\t\tlabel = str(elements[0].firstChild.data)" << std::endl;
file << "\tprint('taskID[{0}], label[{1}]'.format(taskID,label))" << std::endl;
file << "" << std::endl;
file << "\tisGoodSearchLocation = False" << std::endl;
file << "\tlatitude = 0.0" << std::endl;
file << "\tlongitude = 0.0" << std::endl;
file << "\taltitude = 0.0" << std::endl;
file << "\tsearchLocation = []" << std::endl;
file << "\tsearchLocationID = 0" << std::endl;
file << "\tsearchLocationIDNode = patternSearchTaskNode.getElementsByTagName('SearchLocationID')" << std::endl;
file << "\tif len(searchLocationIDNode):" << std::endl;
file << "\t\tsearchLocationID = int(searchLocationIDNode[0].firstChild.data)" << std::endl;
file << "\tif searchLocationID > 0:" << std::endl;
file << "\t\t# find the point of interest" << std::endl;
file << "\t\tfor pointOfInterestFile in glob.glob('PointOfInterest_Id*'):" << std::endl;
file << "\t\t\t#\tPointOfInterest_Id_102.xml" << std::endl;
file << "\t\t\tfileId = int(re.search(r'\\d+',pointOfInterestFile).group())" << std::endl;
file << "\t\t\tif fileId == searchLocationID:" << std::endl;
file << "\t\t\t\tisFoundFile = True" << std::endl;
file << "\t\t\t\tdocFileId = xml.dom.minidom.parse(pointOfInterestFile)" << std::endl;
file << "\t\t\t\tif docFileId.hasChildNodes():" << std::endl;
file << "\t\t\t\t\tfileNode = docFileId.firstChild" << std::endl;
file << "\t\t\t\t\tlocationNode = fileNode.getElementsByTagName('Location')" << std::endl;
file << "\t\t\t\t\tif len(locationNode):" << std::endl;
file << "\t\t\t\t\t\tpointsNode = locationNode[0].getElementsByTagName('Location3D')" << std::endl;
file << "\t\t\t\t\t\tif len(pointsNode):" << std::endl;
file << "\t\t\t\t\t\t\telements = pointsNode[0].getElementsByTagName('Latitude')" << std::endl;
file << "\t\t\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\t\t\tlatitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\t\t\t\telements = pointsNode[0].getElementsByTagName('Longitude')" << std::endl;
file << "\t\t\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\t\t\tlongitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\t\t\t\telements = pointsNode[0].getElementsByTagName('Altitude')" << std::endl;
file << "\t\t\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\t\t\taltitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\t\t\t\tisGoodSearchLocation = True" << std::endl;
file << "\t\t\t\t\t\telse:" << std::endl;
file << "\t\t\t\t\t\t\tprint('ERROR:: processing [' + pointOfInterestFile +'] !!!')" << std::endl;
file << "\t\t\t\t\telse:\t\t" << std::endl;
file << "\t\t\t\t\t\tprint('ERROR:: processing [' + pointOfInterestFile +'] !!!')" << std::endl;
file << "\t\t\t\telse:" << std::endl;
file << "\t\t\t\t\tprint('ERROR:: processing [' + pointOfInterestFile +'] !!!')" << std::endl;
file << "\t\t\t\tbreak" << std::endl;
file << "\telse:" << std::endl;
file << "\t\tsearchLocationNode = patternSearchTaskNode.getElementsByTagName('SearchLocation')" << std::endl;
file << "\t\tif len(searchLocationNode):" << std::endl;
file << "\t\t\tpointsNode = searchLocationNode[0].getElementsByTagName('Location3D')" << std::endl;
file << "\t\t\tif len(pointsNode):" << std::endl;
file << "\t\t\t\telements = pointsNode[0].getElementsByTagName('Latitude')" << std::endl;
file << "\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\tlatitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\telements = pointsNode[0].getElementsByTagName('Longitude')" << std::endl;
file << "\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\tlongitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\telements = pointsNode[0].getElementsByTagName('Altitude')" << std::endl;
file << "\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\taltitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\tisGoodSearchLocation = True" << std::endl;
file << "" << std::endl;
file << "\t# ADD the boundary circle" << std::endl;
file << "\tif isGoodSearchLocation:" << std::endl;
file << "\t\tradius = 0" << std::endl;
file << "\t\tradiusNode = patternSearchTaskNode.getElementsByTagName('Extent')" << std::endl;
file << "\t\tif len(radiusNode):" << std::endl;
file << "\t\t\tradius = float(radiusNode[0].firstChild.data)" << std::endl;
file << "\t\tcenterNorthEast_m = LocalCoords.LatLong_degToNorthEast_m(latitude,longitude)" << std::endl;
file << "\t\theading = 0;" << std::endl;
file << "\t\theadingStep = math.pi/18;\t# 10 deg steps" << std::endl;
file << "\t\twhile heading < 2.0*math.pi:" << std::endl;
file << "\t\t\tnorth_m = radius*math.sin(heading) + centerNorthEast_m[0] " << std::endl;
file << "\t\t\teast_m = radius*math.cos(heading) + centerNorthEast_m[1] " << std::endl;
file << "\t\t\tsearchPointLatLong = LocalCoords.NorthEast_mToLatLong_deg(north_m,east_m)" << std::endl;
file << "\t\t\tsearchLocation.append([searchPointLatLong[0],searchPointLatLong[1],altitude])" << std::endl;
file << "\t\t\theading = heading + headingStep" << std::endl;
file << "" << std::endl;
file << "\tsearchLocationPd = pd.DataFrame(data = searchLocation,columns=['latitude','longitude','altitude'])" << std::endl;
file << "\t# print('RESULT:: ProcessPatternSearchTask->searchLocationPd [' + str(searchLocationPd) +'] !!!')" << std::endl;
file << "\treturn [taskID,label,searchLocationPd]" << std::endl;
file << "" << std::endl;
file << "def ProcessPointSearchTask(pointSearchTaskNode):" << std::endl;
file << "\t# PointSearchTask" << std::endl;
file << "\t# Members inherited from Task: TaskID, Label, EligibleEntities, RevisitRate, Parameters, Priority, Required," << std::endl;
file << "\t# Members inherited from SearchTask: DesiredWavelengthBands, DwellTime, GroundSampleDistance," << std::endl;
file << "\t# SearchLocation - Point to search " << std::endl;
file << "\t# StandoffDistance - Minimum distance that an aircraft must maintain from the point of interest." << std::endl;
file << "\t# ViewAngleList - A list of acceptable look-angles for this task. Each wedge is defined relative to true North. To be a valid look angle, a sensor must be looking from a direction within the bounds of the wedge. " << std::endl;
file << "\ttaskID = 0" << std::endl;
file << "\telements = pointSearchTaskNode.getElementsByTagName('TaskID')" << std::endl;
file << "\tif elements and elements[0].childNodes:" << std::endl;
file << "\t\ttaskID = int(elements[0].firstChild.data)" << std::endl;
file << "\tlabel = ''" << std::endl;
file << "\telements = pointSearchTaskNode.getElementsByTagName('Label')" << std::endl;
file << "\tif elements and elements[0].childNodes:" << std::endl;
file << "\t\tlabel = str(elements[0].firstChild.data)" << std::endl;
file << "\tprint('taskID[{0}], label[{1}]'.format(taskID,label))" << std::endl;
file << "" << std::endl;
file << "\tsearchLocation = []" << std::endl;
file << "\tsearchLocationNode = pointSearchTaskNode.getElementsByTagName('SearchLocation')" << std::endl;
file << "\tif len(searchLocationNode):" << std::endl;
file << "\t\tpointsNode = searchLocationNode[0].getElementsByTagName('Location3D')" << std::endl;
file << "\t\tif len(pointsNode):" << std::endl;
file << "\t\t\tlatitude = 0.0" << std::endl;
file << "\t\t\tlongitude = 0.0" << std::endl;
file << "\t\t\taltitude = 0.0" << std::endl;
file << "\t\t\telements = pointsNode[0].getElementsByTagName('Latitude')" << std::endl;
file << "\t\t\tif elements:" << std::endl;
file << "\t\t\t\tlatitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\telements = pointsNode[0].getElementsByTagName('Longitude')" << std::endl;
file << "\t\t\tif elements:" << std::endl;
file << "\t\t\t\tlongitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\telements = pointsNode[0].getElementsByTagName('Altitude')" << std::endl;
file << "\t\t\tif elements:" << std::endl;
file << "\t\t\t\taltitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\tsearchLocation.append([latitude,longitude,altitude])" << std::endl;
file << "\tsearchLocationPd = pd.DataFrame(data = searchLocation,columns=['latitude','longitude','altitude'])" << std::endl;
file << "\treturn [taskID,label,searchLocationPd]" << std::endl;
file << "" << std::endl;
file << "def ProcessLineSearchTask(lineSearchTaskNode):" << std::endl;
file << "\t# LineSearchTask" << std::endl;
file << "\t# Members inherited from Task: TaskID, Label, EligibleEntities, RevisitRate, Parameters, Priority, Required," << std::endl;
file << "\t# Members inherited from SearchTask: DesiredWavelengthBands, DwellTime, GroundSampleDistance," << std::endl;
file << "\t# PointList - Line to search" << std::endl;
file << "\t# ViewAngleList - Defines a list of acceptable look-angles for this task. See the documentation above for details." << std::endl;
file << "\t# UseInertialViewAngles - If true, the ViewAngleList specifies inertial (North-East) angles. See documentation above." << std::endl;
file << "\ttaskID = 0" << std::endl;
file << "\telements = lineSearchTaskNode.getElementsByTagName('TaskID')" << std::endl;
file << "\tif elements and elements[0].childNodes:" << std::endl;
file << "\t\ttaskID = int(elements[0].firstChild.data)" << std::endl;
file << "\tlabel = ''" << std::endl;
file << "\telements = lineSearchTaskNode.getElementsByTagName('Label')" << std::endl;
file << "\tif elements and elements[0].childNodes:" << std::endl;
file << "\t\tlabel = str(elements[0].firstChild.data)" << std::endl;
file << "\tprint('taskID[{0}], label[{1}]'.format(taskID,label))" << std::endl;
file << "" << std::endl;
file << "\tpointList = []" << std::endl;
file << "\tpointListNode = lineSearchTaskNode.getElementsByTagName('PointList')" << std::endl;
file << "\t# print('pointListNode[' + str(pointListNode[0].nodeName) + ']')" << std::endl;
file << "\tif len(pointListNode):" << std::endl;
file << "\t\tpointsNode = pointListNode[0].getElementsByTagName('Location3D')" << std::endl;
file << "\t\tfor point in pointsNode:" << std::endl;
file << "\t\t\tlatitude = 0.0" << std::endl;
file << "\t\t\tlongitude = 0.0" << std::endl;
file << "\t\t\taltitude = 0.0" << std::endl;
file << "\t\t\tif point:" << std::endl;
file << "\t\t\t\telements = point.getElementsByTagName('Latitude')" << std::endl;
file << "\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\tlatitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\telements = point.getElementsByTagName('Longitude')" << std::endl;
file << "\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\tlongitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\telements = point.getElementsByTagName('Altitude')" << std::endl;
file << "\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\taltitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\tpointList.append([latitude,longitude,altitude])" << std::endl;
file << "\tpointListPd = pd.DataFrame(data = pointList,columns=['latitude','longitude','altitude'])" << std::endl;
file << "\treturn [taskID,label,pointListPd]" << std::endl;
file << "" << std::endl;
file << "def ProcessAreaSearchTask(areaSearchTaskNode):" << std::endl;
file << "\t# Area search task" << std::endl;
file << "\t# Members inherited from Task: TaskID, Label, EligibleEntities, RevisitRate, Parameters, Priority, Required," << std::endl;
file << "\t# Members inherited from SearchTask: DesiredWavelengthBands, DwellTime, GroundSampleDistance," << std::endl;
file << "\t# SearchArea - Area to search " << std::endl;
file << "\t# ViewAngleList - A list of acceptable look-angles for this task. " << std::endl;
file << "\t#\t\t\t\t\tEach wedge is defined relative to true North. " << std::endl;
file << "\t#\t\t\t\t\tTo be a valid look angle, a sensor must be looking from a direction within the bounds of the wedge. " << std::endl;
file << "" << std::endl;
file << "\ttaskID = 0" << std::endl;
file << "\telements = areaSearchTaskNode.getElementsByTagName('TaskID')" << std::endl;
file << "\tif elements and elements[0].childNodes:" << std::endl;
file << "\t\ttaskID = int(elements[0].firstChild.data)" << std::endl;
file << "\tlabel = ''" << std::endl;
file << "\telements = areaSearchTaskNode.getElementsByTagName('Label')" << std::endl;
file << "\tif elements and elements[0].childNodes:" << std::endl;
file << "\t\tlabel = str(elements[0].firstChild.data)" << std::endl;
file << "\tprint('taskID[{0}], label[{1}]'.format(taskID,label))" << std::endl;
file << "" << std::endl;
file << "\tsearchAreaPoints = []" << std::endl;
file << "\tareaNode = areaSearchTaskNode.getElementsByTagName('SearchArea')" << std::endl;
file << "\t# print('areaNode[' + str(areaNode[0].nodeName) + ']')" << std::endl;
file << "\tif len(areaNode):" << std::endl;
file << "\t\tcircleNode = areaNode[0].getElementsByTagName('Circle')" << std::endl;
file << "\t\tpolygonNode = areaNode[0].getElementsByTagName('Polygon')" << std::endl;
file << "\t\trectangleNode = areaNode[0].getElementsByTagName('Rectangle')" << std::endl;
file << "\t\t# print('searchAreaNode[' + str(searchAreaNode[0].firstChild) + ']')" << std::endl;
file << "\t\tsearchAreaType = str('Circle')" << std::endl;
file << "\t\tif len(circleNode):" << std::endl;
file << "\t\t\tcenterPointNode = circleNode[0].getElementsByTagName('CenterPoint')" << std::endl;
file << "\t\t\tlatitude = 0" << std::endl;
file << "\t\t\tlongitude = 0" << std::endl;
file << "\t\t\taltitude = 0" << std::endl;
file << "\t\t\tradius = 0" << std::endl;
file << "\t\t\tif len(centerPointNode):" << std::endl;
file << "\t\t\t\tlocation3DElements = centerPointNode[0].getElementsByTagName('Location3D')" << std::endl;
file << "\t\t\t\tif location3DElements:" << std::endl;
file << "\t\t\t\t\telements = location3DElements[0].getElementsByTagName('Latitude')" << std::endl;
file << "\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\tlatitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\t\telements = location3DElements[0].getElementsByTagName('Longitude')" << std::endl;
file << "\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\tlongitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\t\t\telements = location3DElements[0].getElementsByTagName('Altitude')" << std::endl;
file << "\t\t\t\t\tif elements:" << std::endl;
file << "\t\t\t\t\t\taltitude = float(elements[0].firstChild.data)" << std::endl;
file << "\t\t\tradiusNode = circleNode[0].getElementsByTagName('Radius')" << std::endl;
file << "\t\t\tif len(radiusNode):" << std::endl;
file << "\t\t\t\tradius = float(radiusNode[0].firstChild.data)" << std::endl;
file << "\t\t\tcenterNorthEast_m = LocalCoords.LatLong_degToNorthEast_m(latitude,longitude)" << std::endl;
file << "\t\t\theading = 0;" << std::endl;
file << "\t\t\theadingStep = math.pi/18;\t# 10 deg steps" << std::endl;
file << "\t\t\twhile heading < 2.0*math.pi:" << std::endl;
file << "\t\t\t\tnorth_m = radius*math.sin(heading) + centerNorthEast_m[0] " << std::endl;
file << "\t\t\t\teast_m = radius*math.cos(heading) + centerNorthEast_m[1] " << std::endl;
file << "\t\t\t\tsearchPointLatLong = LocalCoords.NorthEast_mToLatLong_deg(north_m,east_m)" << std::endl;
file << "\t\t\t\tsearchAreaPoints.append([searchPointLatLong[0],searchPointLatLong[1],altitude])" << std::endl;
file << "\t\t\t\theading = heading + headingStep" << std::endl;
file << "\t\telif len(polygonNode):" << std::endl;
file << "\t\t\tprint('WARNING:: Polygon search not implemented!!!')" << std::endl;
file << "\t\telif len(rectangleNode):" << std::endl;
file << "\t\t\tprint('WARNING:: Rectangle search not implemented!!!')" << std::endl;
file << "\t\telse:" << std::endl;
file << "\t\t\tprint('ERROR:: Unknown search area type[' + searchAreaType +'] encountered!!!')" << std::endl;
file << "" << std::endl;
file << "\t\tsearchBoundaryPd = pd.DataFrame(data = searchAreaPoints,columns=['latitude','longitude','altitude'])" << std::endl;
file << "\treturn [taskID,label,searchBoundaryPd]" << std::endl;
file << "" << std::endl;
file << "" << std::endl;
file << "def ProcessTaskFile(filename):" << std::endl;
file << "" << std::endl;
file << "\tsearchTask = []" << std::endl;
file << "\tdoc2 = xml.dom.minidom.parse(filename)" << std::endl;
file << "\tif doc2.hasChildNodes():" << std::endl;
file << "\t\tisGoodMessage = True" << std::endl;
file << "\t\ttaskTypeNode = doc2.firstChild" << std::endl;
file << "\t\ttaskType = str(taskTypeNode.nodeName)" << std::endl;
file << "" << std::endl;
file << "\t\tif taskType == 'PointSearchTask':" << std::endl;
file << "\t\t\tprint('processing PointSearchTask ...')" << std::endl;
file << "\t\t\ttaskData = ProcessPointSearchTask(taskTypeNode)" << std::endl;
file << "\t\t\tif len(taskData):" << std::endl;
file << "\t\t\t\tsearchTask.append(taskData)" << std::endl;
file << "\t\telif taskType == 'LineSearchTask':" << std::endl;
file << "\t\t\tprint('processing LineSearchTask ...')" << std::endl;
file << "\t\t\ttaskData = ProcessLineSearchTask(taskTypeNode)" << std::endl;
file << "\t\t\tif len(taskData):" << std::endl;
file << "\t\t\t\tsearchTask.append(taskData)" << std::endl;
file << "\t\telif taskType == 'AreaSearchTask':" << std::endl;
file << "\t\t\tprint('processing AreaSearchTask ...')" << std::endl;
file << "\t\t\ttaskData = ProcessAreaSearchTask(taskTypeNode)" << std::endl;
file << "\t\t\tif len(taskData):" << std::endl;
file << "\t\t\t\tsearchTask.append(taskData)" << std::endl;
file << "\t\telif taskType == 'AngledAreaSearchTask':" << std::endl;
file << "\t\t\tprint('processing AngledAreaSearchTask ...')" << std::endl;
file << "\t\t\ttaskData = ProcessAngledAreaSearchTask(taskTypeNode)" << std::endl;
file << "\t\t\tif len(taskData):" << std::endl;
file << "\t\t\t\tsearchTask.append(taskData)" << std::endl;
file << "\t\telif taskType == 'ImpactPointSearchTask':" << std::endl;
file << "\t\t\tprint('processing ImpactPointSearchTask ...')" << std::endl;
file << "\t\t\ttaskData = ProcessImpactPointSearchTask(taskTypeNode)" << std::endl;
file << "\t\t\tif len(taskData):" << std::endl;
file << "\t\t\t\tsearchTask.append(taskData)" << std::endl;
file << "\t\telif taskType == 'ImpactLineSearchTask':" << std::endl;
file << "\t\t\tprint('processing ImpactLineSearchTask ...')" << std::endl;
file << "\t\t\ttaskData = ProcessImpactLineSearchTask(taskTypeNode)" << std::endl;
file << "\t\t\tif len(taskData):" << std::endl;
file << "\t\t\t\tsearchTask.append(taskData)" << std::endl;
file << "\t\telif taskType == 'PatternSearchTask':" << std::endl;
file << "\t\t\tprint('processing PatternSearchTask ...')" << std::endl;
file << "\t\t\ttaskData = ProcessPatternSearchTask(taskTypeNode)" << std::endl;
file << "\t\t\tif len(taskData):" << std::endl;
file << "\t\t\t\tsearchTask.append(taskData)" << std::endl;
file << "\t\telif taskType == 'WatchTask':" << std::endl;
file << "\t\t\tprint('processing WatchTask ...')" << std::endl;
file << "\t\t\ttaskData = ProcessWatchTask(taskTypeNode)" << std::endl;
file << "\t\t\tif len(taskData):" << std::endl;
file << "\t\t\t\tsearchTask.append(taskData)" << std::endl;
file << "\t\telse:" << std::endl;
file << "\t\t\tprint('ERROR:: Unknown task type[' + taskType +'] encountered!!!')" << std::endl;
file << "\treturn searchTask" << std::endl;
file << "" << std::endl;
file << "def main():" << std::endl;
file << "\ttaskArray = []" << std::endl;
file << "\tfor taskFile in glob.glob('Task_Id*'):" << std::endl;
file << "\t\tprint('')\t# add a line return" << std::endl;
file << "\t\tprint('***loading [{0}] ***'.format(taskFile))" << std::endl;
file << "\t\ttaskArray.extend(ProcessTaskFile(taskFile))" << std::endl;
file << "\ttaskArrayPd = pd.DataFrame(data = taskArray,columns=['taskID','label','searchBoundaryPd'])" << std::endl;
file << "\tprint('')\t# add a line return" << std::endl;
file << "\tprint('*** saving [Tasks.pkl] ***')" << std::endl;
file << "\tprint('')\t# add a line return" << std::endl;
file << "\ttaskArrayPd.to_pickle('Tasks.pkl')" << std::endl;
file << "" << std::endl;
file << "if __name__ == '__main__':" << std::endl;
file << "    main()" << std::endl;
