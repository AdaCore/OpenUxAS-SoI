package TaskManagerService_Pkg
public
    -- Include DataTypes
    with CMASI;
    with UXTASK;
    with IMPACT;
    with UXNATIVE;
  
  process top_level
		annex agree {**
			eq event_RemoveTasks_in : bool;
			assume "RemoveTasks_in is assumed to occur sporadically with an inter arrival time no sooner than 2ms" :
				condition event_RemoveTasks_in occurs sporadic with IAT 0.002;
		**};
	end top_level;
	
	process implementation top_level.Impl
		subcomponents
			sub : thread TaskManagerService; 
		annex agree {**
			assign event_RemoveTasks_in = event(sub.RemoveTasks_in);
		**};
	end top_level.Impl;
    
    thread TaskManagerService
        features
            MissionCommand_in: in event data port cmasi::MissionCommand.i;
            GroundVehicleConfiguration_in: in event data port impact::GroundVehicleConfiguration.i;
            EntityConfiguration_in: in event data port cmasi::EntityConfiguration.i;
            SurfaceVehicleConfiguration_in: in event data port impact::SurfaceVehicleConfiguration.i;
            AirVehicleConfiguration_in: in event data port cmasi::AirVehicleConfiguration.i;
            AreaOfInterest_in: in event data port impact::AreaOfInterest.i;
            FollowPathCommand_in: in event data port cmasi::FollowPathCommand.i;
            GroundVehicleState_in: in event data port impact::GroundVehicleState.i;
            EntityState_in: in event data port cmasi::EntityState.i;
            PointOfInterest_in: in event data port impact::PointOfInterest.i;
            RemoveTasks_in: in event data port cmasi::RemoveTasks.i;
            AutomationResponse_in: in event data port cmasi::AutomationResponse.i;
            Task_in: in event data port cmasi::Task.i;
            AirVehicleState_in: in event data port cmasi::AirVehicleState.i;
            SurfaceVehicleState_in: in event data port impact::SurfaceVehicleState.i;
            LineOfInterest_in: in event data port impact::LineOfInterest.i;
            UniqueAutomationRequest_out: out event data port uxtask::UniqueAutomationRequest.i;
            KillService_out: out event data port uxnative::KillService.i;
            CreateNewService_out: out event data port uxnative::CreateNewService.i;
        properties
            Dispatch_Protocol => Sporadic;
            
        annex agree{**
                            
            guarantee "Upon reception of a Task message, it will send the appropriate CreateNewService message." :
                event(Task_in) => 
                    event(CreateNewService_out);
                    
            guarantee "When TaskManagerService receives a RemoveTasks message, it will form the appropriate KillService 
                message to properly destroy the service that was created to fulfill the original Task.":
                event(RemoveTasks_in) =>
                    true; --TBD
                    
             --Timing properties
             eq event_Task_in : bool = event(Task_in);
             eq event_CreateNewService_out : bool = event(CreateNewService_out);
             guarantee "CreateNewService_out is emited within 1ms of receiving Task_in":
              	whenever event_Task_in occurs event_CreateNewService_out occurs during [0.0,0.001];
              	
            eq event_RemoveTasks_in : bool = event(RemoveTasks_in);
            eq event_KillService_out: bool = event(KillService_out);
            
            --NOTE: needed to address bounds conccern. 
			assume "RemoveTasks_in is assumed to occur sporadically with an inter arrival time no sooner than 2ms" :
				condition event_RemoveTasks_in occurs sporadic with IAT 0.002;
            
            guarantee "KillService_out is emited within 1ms of receiving RemoveTasks_in" :
            	whenever event_RemoveTasks_in occurs event_KillService_out occurs during [0.0,0.001];
             
        **};
        
    end TaskManagerService;
end TaskManagerService_Pkg;
