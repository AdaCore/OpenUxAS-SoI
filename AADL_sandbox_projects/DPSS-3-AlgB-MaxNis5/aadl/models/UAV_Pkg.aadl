package UAV_Pkg
public
	with DPSS_Data_Types;
	with Base_Types;
	with DPSS_Constants;
	 
	system UAV
		features
			--Inputs
			suggested_initial_direction : in data port DPSS_Data_Types::Direction_Type; --The UAV may choose a different direction for the initial timestep, depending on the circumstances.
			initial_position : in data port DPSS_Data_Types::Position_Type;
			meet_LN : in data port Base_Types::Boolean; --True iff this UAV and its left neighbor are co-located
			meet_RN : in data port Base_Types::Boolean; --True iff this UAV and its right neighbor are co-located		
			perimRight_RN : in data port DPSS_Data_Types::Distance_Type; --Perimeter to the right of the right neighbor (as best as the right neighbor knows it) 
			perimLeft_LN : in data port DPSS_Data_Types::Distance_Type; --Perimeter to the left of the left neighbor (not necessary because this is equal to pos_LN)
			numRight_RN : in data port Base_Types::Integer;
			numLeft_LN : in data port Base_Types::Integer;
			right_endp_truth : in data port DPSS_Data_Types::Distance_Type; --only used to detect when the UAV reaches the true right endpoint
			left_endp_truth : in data port DPSS_Data_Types::Distance_Type; --only used to detect when the UAV reaches the true left endpoint
			pos : in data port DPSS_Data_Types::Position_Type;
			
			--Outputs
			direction: out data port DPSS_Data_Types::Direction_Type;
			goal : out data port DPSS_Data_Types::Position_Type;
			perimRight : out data port DPSS_Data_Types::Distance_Type; --perimeter to the right of this UAV (as best as it knows)
			perimLeft : out data port DPSS_Data_Types::Distance_Type; --perimeter to the left of this UAV (as best as it knows)
			numRight : out data port Base_Types::Integer; --number of UAVs to the right of this UAV (as best as this UAV knows)
			numLeft : out data port Base_Types::Integer; --number of UAVs to the left of this UAV (as best as this UAV knows)		
					
		annex agree {**
			
			-----------------------------------------------------
			--STATE VARIABLES
			-----------------------------------------------------
			
			--The true left and right endpoints are only used to determine whether the vehicle has reached them.
			eq reach_right_endp_truth : bool = (pos >= right_endp_truth); 
			eq reach_left_endp_truth : 	bool = (pos <= left_endp_truth); 

			--Previous numLeft
			eq pre_numLeft : int; --See guarantees for restrictions on pre_numLeft
			
			--Previous numRight
			eq pre_numRight : int; --See guarantees for restrictions on pre_numRight
			
			--Previous perimRight
			eq pre_perimRight : real = pre(perimRight);
			
			--Previous perimLeft
			eq pre_perimLeft : real = pre(perimLeft);
			
			--ID (will change during execution as this UAV meets its neighbors)
			eq id : int = numLeft + 1;
			
			--Total number of UAVs (as best as this UAV knows)
			eq N : int = numLeft + numRight + 1;
			
			--Total perimeter (as best as this UAV knows)
			eq P : DPSS_Data_Types::Position_Type = 
				perimRight + perimLeft;
				
			eq left_endp_est : DPSS_Data_Types::Position_Type = 
				pos - perimLeft;
				
			eq right_endp_est : DPSS_Data_Types::Position_Type = 
				pos + perimRight;

			--Make id a piecewise-constant real-valued variable. This, combined with N_lin, makes the shared border formulas piecewise linear and allows 
			--     analysis to be successful at the top level.
			--Assumes 1 <= id <= 13
			--Notes: (1) numLeft will be in the range 0, 1, ..., N_TRUTH - 1 + max(initial numLeft))
			--       (2) id = numLeft + 1	
			eq id_lin : real = 
				if id = 1 then
					1.0
				else
					if id = 2 then
						2.0
					else 
						if id = 3 then
							3.0
						else
							if id = 4 then
								4.0
							else 
								if id = 5 then
									5.0
								else
									if id = 6 then
										6.0
									else 
										if id = 7 then
											7.0
										else
											if id = 8 then
												8.0
											else
												9.0; 
					
			--Make N a piecewise-constant real-valued variable. This, combined with id_lin, makes the shared border formulas piecewise linear and allows 
			--     analysis to be successful at the top level.
			--Assumes 1 <= N <= 13		
			--Notes: (1) numRight will be in the range 0, 1, ..., N_TRUTH - 1 + max(initial numRight))
			--       (2) numLeft  will be in the range 0, 1, ..., N_TRUTH - 1 + max(initial numLeft ))
			--       (3) N = numRight + numLeft + 1
			--       (4) Therefore, 1 <= N <= 2*N_TRUTH + max(initial numRight) + max(initial numLeft) - 1
			--       (5) We could improve this bound since numRight and numLeft will not be maximized at the same time, but we'll keep the generous bound for now.
			eq N_lin : real = 
				if N = 1 then
					1.0
				else 
					if N = 2 then
						2.0
					else 
						if N = 3 then
							3.0
						else
							if N = 4 then
								4.0
							else 
								if N = 5 then
									5.0
								else
									if N = 6 then
										6.0
									else
										if N = 7 then
											7.0
										else
											if N = 8 then
												8.0
											else
												if N = 9 then
													9.0
												else 
													if N = 10 then
														10.0
													else
														if N = 11 then
															11.0
														else 
															if N = 12 then
																12.0
															else
																13.0; 
				
			--Shared border positions (using linearized formulas for N and id)
			eq S_L : DPSS_Data_Types::Position_Type = 
				(id_lin - 1.0)*P/N_lin + left_endp_est;  
			eq S_R : DPSS_Data_Types::Position_Type = 
				id_lin*P/N_lin + left_endp_est;	
					
			--Previous direction
			eq pre_direction : DPSS_Data_Types::Direction_Type = 
				prev(direction, suggested_initial_direction);
				
			--Previous position
			eq pre_pos : DPSS_Data_Types::Position_Type =
				prev(pos, initial_position);
						
			-----------------------------------------------------
			--ASSUMPTIONS
			-----------------------------------------------------		
			
			assume "right_endp_truth is greater than left_endp_truth":
				right_endp_truth > left_endp_truth;
				
			assume "right_endp_truth is fixed":
				true -> (right_endp_truth = pre(right_endp_truth));

			assume "left_endp_truth is fixed":
				true -> (left_endp_truth = pre(left_endp_truth));			
						
			assume "Suggested initial direction is LEFT or RIGHT":
				(	   suggested_initial_direction = DPSS_Constants.LEFT
					or suggested_initial_direction = DPSS_Constants.RIGHT)
				-> true;
			
			-----------------------------------------------------
			--GUARANTEES
			-----------------------------------------------------
	
			guarantee "Direction formula":
				direction = (
					-- Turn around at the left boundary.
					if reach_left_endp_truth then
						1
					else 
						-- Turn around at the right boundary.
						if reach_right_endp_truth then
							-1
						else 
							-- If meeting left neighbor, travel together toward shared border.
							if meet_LN then
								if pos <= S_L then
									1
								else --pos > S_L
									-1
							else
								-- If meeting right neighbor, travel together toward shared border. 
							  	if meet_RN then
									if pos < S_R then
										1
									else --pos >= S_R
										-1 
								-- In all other cases, proceed in the same direction.
								else 
									pre_direction
				);  

			guarantee "Goal formula":
				goal = (
						-- If co-located with left and right neighbors,...
						if meet_LN and meet_RN then
							--...and at or to the left of the shared border with the left neighbor, make goal the shared border with the right neighbor.
							if pos <= S_L then
								S_R
							--...and to the right of the shared border with the left neighbor, make goal the shared border with the left neighbor.
							else -- pos > S_L
								S_L 
						else		
							-- If co-located with left neighbor only,...
							if meet_LN then
								--...and at or to the left of the shared border with the left neighbor, make goal the right endpoint.
								if pos <= S_L then
									right_endp_est
								--...and to the right of the shared border with the left neighbor, make goal the shared border with the left neighbor.
								else -- pos > S_L
									S_L
							else 
								-- If co-located with right neighbor only,...
								if meet_RN then
									--...and at or to the right of the shared border with the right neighbor, make goal the left endpoint.
									if pos >= S_R then
										left_endp_est
									--...and to the left of the shared border with the right neighbor, make goal the shared border with the right neighbor.
									else -- pos < S_R
										S_R
								else -- If not co-located with either neighbor,...
									-- ...and heading right, set goal to the right endpoint. 
									if direction = 1 then
										right_endp_est
									  -- ...and heading left, set goal to the left endpoint.
									else --direction = -1 
										left_endp_est 
				); 
						
			guarantee "pre_numLeft is pre(numLeft) after the initial timestep":
				true -> pre_numLeft = pre(numLeft);
			
			guarantee "pre_numRight is pre(numRight) after the initial timestep":
				true -> pre_numRight = pre(numRight);

			--We allow the initial value of pre_numLeft to range from 0 to 4 (We're assuming no more than 5 vehicles)	
			guarantee "pre_numLeft initial value restrictions":
				DPSS_Node_Lib.initial_value_true(
								pre_numLeft >= 0 
							and	pre_numLeft <= 4
				);
			
			--We allow the initial value of pre_numRight to range from 0 to 4 (We're assuming no more than 5 vehicles)	
			guarantee "pre_numRight initial value restrictions":
				DPSS_Node_Lib.initial_value_true(
								pre_numRight >= 0 
							and pre_numRight <= 4
				);
		
			guarantee "numLeft formula":
				numLeft = 	if meet_LN then 
								numLeft_LN + 1 
						 	else 
						 		if reach_left_endp_truth then
						 			0
						 		else 
						  			pre_numLeft;
				
			guarantee "numRight formula":
				numRight = 	if meet_RN then 
								numRight_RN + 1 
							else 
								if reach_right_endp_truth then
									0
								else
									pre_numRight;				
			
			guarantee "perimRight formula":
				perimRight = if meet_RN then 
								perimRight_RN 
							 else 
							 	if reach_right_endp_truth then
							 		0.0
							 	else  
								 	if pre_direction = 1 then
								 		DPSS_Node_Lib.max_real(0.0, pre_perimRight - (pos - pre_pos))
								 	else --pre_direction = -1
								 		DPSS_Node_Lib.max_real(0.0, pre_perimRight + (pre_pos - pos));
								 		
			guarantee "perimLeft formula":
				perimLeft = if meet_LN then
								perimLeft_LN
							else 
								if reach_left_endp_truth then
									0.0
								else
									if pre_direction = 1 then
										DPSS_Node_Lib.max_real(0.0, pre_perimLeft + (pos - pre_pos))
									else --pre_direction = -1
										DPSS_Node_Lib.max_real(0.0, pre_perimLeft - (pre_pos - pos));
			
		**};
		
	end UAV;
end UAV_Pkg;