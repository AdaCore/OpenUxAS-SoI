package UAV_Pkg
public
	with DPSS_Data_Types;
	with Base_Types;
	with DPSS_Constants;
	 
	system UAV
		features
			--Inputs
			suggested_initial_direction : in data port DPSS_Data_Types::Direction_Type; --The UAV may choose a different direction for the initial timestep, depending on the circumstances.
			initial_position : in data port DPSS_Data_Types::Position_Type;
			pos_LN : in data port DPSS_Data_Types::Position_Type; --Position of left neighbor (< 0  if there is no left neighbor)
			pos_RN : in data port DPSS_Data_Types::Position_Type; --Position of right neighbor (> P_GLOBAL if there is no right neighbor)
--			perimRight_RN : in data port DPSS_Data_Types::Distance_Type; --Perimeter to the right of the right neighbor (as best as the right neighbor knows it) 
--			perimLeft_LN : in data port DPSS_Data_Types::Distance_Type; --Perimeter to the left of the left neighbor (not necessary because this is equal to pos_LN)
			numRight_RN : in data port Base_Types::Integer;
			numLeft_LN : in data port Base_Types::Integer;
			P_truth : in data port DPSS_Data_Types::Distance_Type; --only used to detect when the UAV reaches P
			
			--Outputs
			direction: out data port DPSS_Data_Types::Direction_Type;
			goal : out data port DPSS_Data_Types::Position_Type;
			pos : out data port DPSS_Data_Types::Position_Type;
			perimRight : out data port DPSS_Data_Types::Distance_Type; --perimeter to the right of this UAV (as best as it knows)
			numRight : out data port Base_Types::Integer; --number of UAVs to the right of this UAV (as best as this UAV knows)
			numLeft : out data port Base_Types::Integer; --number of UAVs to the left of this UAV (as best as this UAV knows)		
					
		annex agree {**
				
			-----------------------------------------------------
			--STATE VARIABLES
			-----------------------------------------------------
	
			--These Booleans are true iff the neighbors meet (i.e., are co-located) on this timestep. 
			eq meet_LN : bool = (pos_LN = pos); --Meet left neighbor?
			eq meet_RN : bool = (pos_RN = pos); --Meet right neighbor?
			eq reach_P_truth : bool = (pos >= P_truth); --Since the models are infinitely precise, we could use = here; but I'm using >= for consistency with what we did before

			--Previous numLeft
			eq pre_numLeft : int = prev(numLeft, 0);
			
			--Previous numRight
			eq pre_numRight : int = prev(numRight, 0);
			
			--Previous perimRight
--			eq pre_perimRight : real = prev(perimRight, 0.0);

			--ID (will change during execution as this UAV meets its neighbors)
			eq id : int = numLeft + 1;
			
			--Total number of UAVs (as best as this UAV knows)
			eq N : int = numLeft + numRight + 1;
			
			--In this LearnN verion, the vehicle knows P_GLOBAL
--			--Total perimeter (as best as this UAV knows)
--			eq P : DPSS_Data_Types::Position_Type = 
--				pos + perimRight;
				
			--Shared border positions
			eq S_L : DPSS_Data_Types::Position_Type = 
				real(id-1)*DPSS_Constants.P_GLOBAL/real(N);  
			eq S_R : DPSS_Data_Types::Position_Type = 
				real(id)*DPSS_Constants.P_GLOBAL/real(N);	
				
			--Previous direction
			eq pre_direction : DPSS_Data_Types::Direction_Type = 
				prev(direction, suggested_initial_direction);
				
			--Previous position
			eq pre_pos : DPSS_Data_Types::Position_Type =
				prev(pos, initial_position);
						
			-----------------------------------------------------
			--ASSUMPTIONS
			-----------------------------------------------------		
			
			assume "Input initial position is nonnegative":
				(0.0 <= initial_position)
				-> true;
							
			assume "Suggested initial direction is LEFT or RIGHT":
				(		suggested_initial_direction = DPSS_Constants.LEFT
					or 	suggested_initial_direction = DPSS_Constants.RIGHT)
				-> true;
			
--			assume "numLeft_LN is nonnegative": numLeft_LN >= 0;
--			
--			assume "numRight_RN is nonnegative": numRight_RN >= 0;
							
			-----------------------------------------------------
			--GUARANTEES
			-----------------------------------------------------
			
			guarantee "Direction formula":
				direction = (
					-- Turn around at the left boundary.
					if pos <= 0.0 then
						1
					else 
						-- Turn around at the right boundary.
						if reach_P_truth then
							-1
						else 
							-- If meeting left neighbor, travel together toward shared border.
							if meet_LN then
								if pos <= S_L then
									1
								else --pos > S_L
									-1
							else
								-- If meeting right neighbor, travel together toward shared border. 
							  	if meet_RN then
									if pos < S_R then
										1
									else --pos >= S_R
										-1 
								-- In all other cases, proceed in the same direction.
								else 
									pre_direction
				);  

			guarantee "Goal formula":
				goal = (
						-- If co-located with left and right neighbors,...
						if meet_LN and meet_RN then
							--...and at or to the left of the shared border with the left neighbor, make goal the shared border with the right neighbor.
							if pos <= S_L then
								S_R
							--...and to the right of the shared border with the left neighbor, make goal the shared border with the left neighbor.
							else -- pos > S_L
								S_L 
						else		
							-- If co-located with left neighbor only,...
							if meet_LN then
								--...and at or to the left of the shared border with the left neighbor, make goal the right endpoint.
								if pos <= S_L then
									DPSS_Constants.P_GLOBAL
								--...and to the right of the shared border with the left neighbor, make goal the shared border with the left neighbor.
								else -- pos > S_L
									S_L
							else 
								-- If co-located with right neighbor only,...
								if meet_RN then
									--...and at or to the right of the shared border with the right neighbor, make goal the left endpoint.
									if pos >= S_R then
										0.0
									--...and to the left of the shared border with the right neighbor, make goal the shared border with the right neighbor.
									else -- pos < S_R
										S_R
								else -- If not co-located with either neighbor,...
									-- ...and heading right, set goal to the right endpoint. 
									if direction = 1 then
										DPSS_Constants.P_GLOBAL
									  -- ...and heading left, set goal to the left endpoint.
									else --direction = -1 
										0.0 
				); 

			guarantee "Position formula":
				pos = (initial_position -> 
						(if pre_direction = 1 then
							pre_pos + DPSS_Constants.V*(time - pre(time))
						else --pre_direction = -1
							pre_pos - DPSS_Constants.V*(time - pre(time))));
			
			guarantee "numLeft formula":
				numLeft = if meet_LN then numLeft_LN + 1 else pre_numLeft;
				
			guarantee "numRight formula":
				numRight = if meet_RN then numRight_RN + 1 else pre_numRight;
			
--			guarantee "perimRight formula":
--				perimRight = if meet_RN then 
--								perimRight_RN 
--							 else 
--							 	if reach_P_truth then
--							 		0.0
--							 	else  
--								 	if pre_direction = 1 then
--								 		pre_perimRight - (pos - pre_pos)
--								 	else --pre_direction = -1
--								 		pre_perimRight + (pre_pos - pos);
			
--This should be a lemma in the higher level
--			guarantee "ID in range":
--				id >= 1 and id <= N;
			
		**};
		
	end UAV;
end UAV_Pkg;