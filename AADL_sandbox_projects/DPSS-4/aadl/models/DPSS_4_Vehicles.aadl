package DPSS_4_Vehicles_Pkg
public
	with DPSS_Data_Types;
	with DPSS_Node_Lib;
	with DPSS_Constants;
	with UAV_Pkg;
	
	system DPSS_4_Vehicles
		features
			--Inputs:
			initial_pos_UAV1 : in data port DPSS_Data_Types::Position_Type;
			suggested_initial_direction_UAV1 : in data port DPSS_Data_Types::Direction_Type;
			initial_pos_UAV2 : in data port DPSS_Data_Types::Position_Type;
			suggested_initial_direction_UAV2 : in data port DPSS_Data_Types::Direction_Type;
			initial_pos_UAV3 : in data port DPSS_Data_Types::Position_Type;
			suggested_initial_direction_UAV3 : in data port DPSS_Data_Types::Direction_Type;
			initial_pos_UAV4 : in data port DPSS_Data_Types::Position_Type;
			suggested_initial_direction_UAV4 : in data port DPSS_Data_Types::Direction_Type;
			
			--Outputs:
			pos_UAV1 : out data port DPSS_Data_Types::Position_Type;
			pos_UAV2 : out data port DPSS_Data_Types::Position_Type;
			pos_UAV3 : out data port DPSS_Data_Types::Position_Type;
			pos_UAV4 : out data port DPSS_Data_Types::Position_Type;
			 
		annex agree {**
			
			eq direction_UAV1 : DPSS_Data_Types::Direction_Type;
			eq direction_UAV2 : DPSS_Data_Types::Direction_Type;
			eq direction_UAV3 : DPSS_Data_Types::Direction_Type;
			eq direction_UAV4 : DPSS_Data_Types::Direction_Type;
	
			eq goal_UAV1 : DPSS_Data_Types::Position_Type;
			eq goal_UAV2 : DPSS_Data_Types::Position_Type;
			eq goal_UAV3 : DPSS_Data_Types::Position_Type;
			eq goal_UAV4 : DPSS_Data_Types::Position_Type;
			
			--Shared border positions
			eq S_12 : DPSS_Data_Types::Position_Type = 
				1.0*DPSS_Constants.P_GLOBAL/DPSS_Constants.N_real;  
			eq S_23 : DPSS_Data_Types::Position_Type = 
				2.0*DPSS_Constants.P_GLOBAL/DPSS_Constants.N_real;
			eq S_34 : DPSS_Data_Types::Position_Type = 
				3.0*DPSS_Constants.P_GLOBAL/DPSS_Constants.N_real;
			
			--Previous positions
			eq pre_pos_UAV1 : DPSS_Data_Types::Position_Type = 
				prev(pos_UAV1, initial_pos_UAV1);
			eq pre_pos_UAV2 : DPSS_Data_Types::Position_Type = 
				prev(pos_UAV2, initial_pos_UAV2);
			eq pre_pos_UAV3 : DPSS_Data_Types::Position_Type = 
				prev(pos_UAV3, initial_pos_UAV3);
			eq pre_pos_UAV4 : DPSS_Data_Types::Position_Type = 
				prev(pos_UAV4, initial_pos_UAV4);			
			
			--Previous directions
			eq pre_direction_UAV1 : DPSS_Data_Types::Direction_Type = 
				prev(direction_UAV1, suggested_initial_direction_UAV1);
			eq pre_direction_UAV2 : DPSS_Data_Types::Direction_Type = 
				prev(direction_UAV2, suggested_initial_direction_UAV2);
			eq pre_direction_UAV3 : DPSS_Data_Types::Direction_Type = 
				prev(direction_UAV3, suggested_initial_direction_UAV3);
			eq pre_direction_UAV4 : DPSS_Data_Types::Direction_Type = 
				prev(direction_UAV4, suggested_initial_direction_UAV4);
			
			--Previous goals
			eq pre_goal_UAV1 : DPSS_Data_Types::Position_Type = 
				prev(goal_UAV1, (if direction_UAV1 = 1 then DPSS_Constants.P_GLOBAL else 0.0));
			eq pre_goal_UAV2 : DPSS_Data_Types::Position_Type = 
				prev(goal_UAV2, (if direction_UAV2 = 1 then DPSS_Constants.P_GLOBAL else 0.0));
			eq pre_goal_UAV3 : DPSS_Data_Types::Position_Type = 
				prev(goal_UAV3, (if direction_UAV3 = 1 then DPSS_Constants.P_GLOBAL else 0.0));
			eq pre_goal_UAV4 : DPSS_Data_Types::Position_Type = 
				prev(goal_UAV4, (if direction_UAV4 = 1 then DPSS_Constants.P_GLOBAL else 0.0));
						
			--Times to reach neighbors													
			eq time_to_reach_neighbor_12 : DPSS_Data_Types::Time_Type = 
				DPSS_Node_Lib.time_to_reach_neighbor(pre_direction_UAV1,
														pre_direction_UAV2,
														pre_pos_UAV1,
														pre_pos_UAV2
														);
																		
			eq time_to_reach_neighbor_23 : DPSS_Data_Types::Time_Type = 
				DPSS_Node_Lib.time_to_reach_neighbor(pre_direction_UAV2,
														pre_direction_UAV3,
														pre_pos_UAV2,
														pre_pos_UAV3
														);
			
			eq time_to_reach_neighbor_34 : DPSS_Data_Types::Time_Type = 
				DPSS_Node_Lib.time_to_reach_neighbor(pre_direction_UAV3,
														pre_direction_UAV4,
														pre_pos_UAV3,
														pre_pos_UAV4
														);

			--Times to reach goals
			eq time_until_UAV1_reaches_goal : DPSS_Data_Types::Time_Type = 
				DPSS_Node_Lib.time_to_reach_target_position(
					pre_direction_UAV1, 
					pre_pos_UAV1, 
					pre_goal_UAV1
				);
				
			eq time_until_UAV2_reaches_goal : DPSS_Data_Types::Time_Type = 
				DPSS_Node_Lib.time_to_reach_target_position(
					pre_direction_UAV2, 
					pre_pos_UAV2, 
					pre_goal_UAV2
				);
				
			eq time_until_UAV3_reaches_goal : DPSS_Data_Types::Time_Type = 
				DPSS_Node_Lib.time_to_reach_target_position(
					pre_direction_UAV3, 
					pre_pos_UAV3, 
					pre_goal_UAV3
				);
			
			eq time_until_UAV4_reaches_goal : DPSS_Data_Types::Time_Type = 
				DPSS_Node_Lib.time_to_reach_target_position(
					pre_direction_UAV4, 
					pre_pos_UAV4, 
					pre_goal_UAV4
				);
			
			
			eq deltaT : DPSS_Data_Types::Time_Type = 
							DPSS_Node_Lib.min_time(time_until_UAV1_reaches_goal,
							DPSS_Node_Lib.min_time(time_until_UAV2_reaches_goal,
							DPSS_Node_Lib.min_time(time_until_UAV3_reaches_goal,
							DPSS_Node_Lib.min_time(time_until_UAV4_reaches_goal,
							DPSS_Node_Lib.min_time(time_to_reach_neighbor_12,
							DPSS_Node_Lib.min_time(time_to_reach_neighbor_23,
												   time_to_reach_neighbor_34))))));
			
			eq stable : bool = 
				--Either
				(	--the UAVs are at 0, S_23, S_23, and P, respectively
					(
						pos_UAV1 = 0.0 and 
						pos_UAV2 = S_23 and 
						pos_UAV3 = S_23 and 
						pos_UAV4 = DPSS_Constants.P_GLOBAL
						)
					--and were previously at S_12, S_12, S_34, and S_34, respectively
					and (
						pre_pos_UAV1 = S_12 and 
						pre_pos_UAV2 = S_12 and 
						pre_pos_UAV3 = S_34 and 
						pre_pos_UAV4 = S_34
					)
				)
				--or
				or (--the UAVs are at S_12, S_12, S_34, and S_34, respectively
					(
						pos_UAV1 = S_12 and 
						pos_UAV2 = S_12 and 
						pos_UAV3 = S_34 and 
						pos_UAV4 = S_34
					)
					--and were previously at 0, S_23, S_23, and P, respectively
					and (
						pre_pos_UAV1 = 0.0 and 
						pre_pos_UAV2 = S_23 and 
						pre_pos_UAV3 = S_23 and 
						pre_pos_UAV4 = DPSS_Constants.P_GLOBAL
					)
				);
						
			-----------------------------------------------------
			--ASSUMPTIONS
			-----------------------------------------------------
			
			assume "time update": time = (0.0 -> pre(time) + deltaT);
			
			assume "UAVs are numbered according to their position from left to right":
				(initial_pos_UAV1 <= initial_pos_UAV2
				and initial_pos_UAV2 <= initial_pos_UAV3
				and initial_pos_UAV3 <= initial_pos_UAV4
				)
				-> true;
				
			assume "Initial positions are between 0 and P_GLOBAL":
				(0.0 <= initial_pos_UAV1 
				and initial_pos_UAV1 <= DPSS_Constants.P_GLOBAL
				and 0.0 <= initial_pos_UAV2 
				and initial_pos_UAV2 <= DPSS_Constants.P_GLOBAL
				and 0.0 <= initial_pos_UAV3 
				and initial_pos_UAV3 <= DPSS_Constants.P_GLOBAL
				and 0.0 <= initial_pos_UAV4 
				and initial_pos_UAV4 <= DPSS_Constants.P_GLOBAL
				)
				-> true;
				
			assume "Suggested initial directions are LEFT or RIGHT":
				((suggested_initial_direction_UAV1 = DPSS_Constants.LEFT
					or suggested_initial_direction_UAV1 = DPSS_Constants.RIGHT)
				and (suggested_initial_direction_UAV2 = DPSS_Constants.LEFT
					or suggested_initial_direction_UAV2 = DPSS_Constants.RIGHT)
				and (suggested_initial_direction_UAV3 = DPSS_Constants.LEFT
					or suggested_initial_direction_UAV3 = DPSS_Constants.RIGHT)
				and (suggested_initial_direction_UAV4 = DPSS_Constants.LEFT
					or suggested_initial_direction_UAV4 = DPSS_Constants.RIGHT)
				)
				-> true;

			-----------------------------------------------------
			--GUARANTEES
			-----------------------------------------------------
			
			-- Main Theorem			
			guarantee "Theorem 1 for Algorithm A for 4 Vehicles":
				(time >= ((2.0*DPSS_Constants.N_real - 1.0)/DPSS_Constants.N_real)*DPSS_Constants.Time_to_travel_full_length) =>
					(stable	and deltaT = DPSS_Constants.Time_to_travel_full_length/DPSS_Constants.N_real);
			
			guarantee "Initial positions are the input initial positions":
				(pos_UAV1 = initial_pos_UAV1
				and pos_UAV2 = initial_pos_UAV2
				and pos_UAV3 = initial_pos_UAV3
				and pos_UAV4 = initial_pos_UAV4
				) -> true;
			
			guarantee "Goals are in bounds":
				0.0 <= goal_UAV1
				and goal_UAV1 <= DPSS_Constants.P_GLOBAL
				and 0.0 <= goal_UAV2
				and goal_UAV2 <= DPSS_Constants.P_GLOBAL
				and 0.0 <= goal_UAV3
				and goal_UAV3 <= DPSS_Constants.P_GLOBAL
				and 0.0 <= goal_UAV4
				and goal_UAV4 <= DPSS_Constants.P_GLOBAL;	
			
			guarantee "Positions are in bounds":
				0.0 <= pos_UAV1 
				and pos_UAV1 <= DPSS_Constants.P_GLOBAL
				and 0.0 <= pos_UAV2 
				and pos_UAV2 <= DPSS_Constants.P_GLOBAL
				and 0.0 <= pos_UAV3 
				and pos_UAV3 <= DPSS_Constants.P_GLOBAL
				and 0.0 <= pos_UAV4 
				and pos_UAV4 <= DPSS_Constants.P_GLOBAL;
			
			guarantee "UAVs stay in order":
				pos_UAV1 <= pos_UAV2
				and pos_UAV2 <= pos_UAV3
				and pos_UAV3 <= pos_UAV4;
			
			guarantee "UAVs turn around at the borders":
				pos_UAV1 = 0.0 => direction_UAV1 = 1
				and pos_UAV1 = DPSS_Constants.P_GLOBAL => direction_UAV1 = -1
				and pos_UAV2 = 0.0 => direction_UAV2 = 1
				and pos_UAV2 = DPSS_Constants.P_GLOBAL => direction_UAV2 = -1
				and pos_UAV3 = 0.0 => direction_UAV3 = 1
				and pos_UAV3 = DPSS_Constants.P_GLOBAL => direction_UAV3 = -1
				and pos_UAV4 = 0.0 => direction_UAV4 = 1
				and pos_UAV4 = DPSS_Constants.P_GLOBAL => direction_UAV4 = -1;
				
			guarantee "Directions are in bounds":
				(direction_UAV1 = 1 or direction_UAV1 = -1)
				and (direction_UAV2 = 1 or direction_UAV2 = -1)
				and (direction_UAV3 = 1 or direction_UAV3 = -1)
				and (direction_UAV4 = 1 or direction_UAV4 = -1);
			
		**};
		
	end DPSS_4_Vehicles;

	system implementation DPSS_4_Vehicles.Impl
		subcomponents
			UAV1: system UAV_Pkg::UAV;
			UAV2: system UAV_Pkg::UAV;
			UAV3: system UAV_Pkg::UAV;
			UAV4: system UAV_Pkg::UAV;
			
		connections
			--Suggested initial directions
			sug_init_dir_UAV1: port	suggested_initial_direction_UAV1 -> UAV1.suggested_initial_direction;
			sug_init_dir_UAV2: port	suggested_initial_direction_UAV2 -> UAV2.suggested_initial_direction;
			sug_init_dir_UAV3: port	suggested_initial_direction_UAV3 -> UAV3.suggested_initial_direction;
			sug_init_dir_UAV4: port	suggested_initial_direction_UAV3 -> UAV4.suggested_initial_direction;
			
			--Initial positions
			init_pos_UAV1: port initial_pos_UAV1 -> UAV1.initial_position;
			init_pos_UAV2: port initial_pos_UAV2 -> UAV2.initial_position;
			init_pos_UAV3: port initial_pos_UAV3 -> UAV3.initial_position;
			init_pos_UAV4: port initial_pos_UAV4 -> UAV4.initial_position;
			
			--Connections between neighbors for sharing positions
			pos_UAV1_to_UAV2 : port UAV1.pos -> UAV2.pos_LN;
			pos_UAV2_to_UAV1 : port UAV2.pos -> UAV1.pos_RN;
			pos_UAV2_to_UAV3 : port UAV2.pos -> UAV3.pos_LN;
			pos_UAV3_to_UAV2 : port UAV3.pos -> UAV2.pos_RN;
			pos_UAV3_to_UAV4 : port UAV3.pos -> UAV4.pos_LN;
			pos_UAV4_to_UAV3 : port UAV4.pos -> UAV3.pos_RN;
			
			--Output positions of the UAVs
			pos_UAV1_output : port UAV1.pos -> pos_UAV1;
			pos_UAV2_output : port UAV2.pos -> pos_UAV2;
			pos_UAV3_output : port UAV3.pos -> pos_UAV3;
			pos_UAV4_output : port UAV4.pos -> pos_UAV4;
						
		annex agree {**

			--UAV1 output
			assign direction_UAV1 = UAV1.direction;
			assign goal_UAV1 = UAV1.goal;
			
			--UAV1 inputs
			--Since the leftmost UAV has no left neighbor, set pos_LN to something to the left of the left endpoint (so UAV1 never meets its "phantom" neighbor).
			assert UAV1.pos_LN = -1.0; 
			assert UAV1.id = 1;
						
			--UAV2 outputs
			assign direction_UAV2 = UAV2.direction;
			assign goal_UAV2 = UAV2.goal;
			
			--UAV2 inputs
			assert UAV2.id = 2;
							
			--UAV3 outputs
			assign direction_UAV3 = UAV3.direction;
			assign goal_UAV3 = UAV3.goal;
			
			--UAV3 inputs
			--Since the rightmost UAV has no right neighbor, set pos_RN to something to the right of the right endpoint (so UAVN never meets its "phantom" neighbor).
			assert UAV3.id = 3;
			
			--UAV4 outputs
			assign direction_UAV4 = UAV4.direction;
			assign goal_UAV4 = UAV4.goal;
			
			--UAV4 inputs
			--Since the rightmost UAV has no right neighbor, set pos_RN to something to the right of the right endpoint (so UAVN never meets its "phantom" neighbor).
			assert UAV4.pos_RN = DPSS_Constants.P_GLOBAL + 1.0;
			assert UAV4.id = 4;		
			
			--Used in lemmas
			eq steps : int = 1 -> pre(steps + 1);
			
			--Expected number of steps it takes to converge to the stable configuration
			eq steps_to_converge : int = 16;
			
			----------------------------------------------------------------------------
			--OBSERVERS (Invalid lemmas that produce examples of behavior of interest)
			----------------------------------------------------------------------------
						
			lemma "Observer: Worst time convergence":
				not (
					stable
					and DPSS_Node_Lib.initial_value_true(direction_UAV1 = 1)
					and DPSS_Node_Lib.initial_value_true(direction_UAV2 = 1)
					and DPSS_Node_Lib.initial_value_true(direction_UAV3 = 1)
					and DPSS_Node_Lib.initial_value_true(direction_UAV4 = 1)
					and DPSS_Node_Lib.initial_value_true(pos_UAV1 = 0.0)
					and DPSS_Node_Lib.initial_value_true(pos_UAV2 = 0.01)
					and DPSS_Node_Lib.initial_value_true(pos_UAV3 = 0.02)
					and DPSS_Node_Lib.initial_value_true(pos_UAV4 = 0.03)
				);
			
			lemma "Observer: Worst steps convergence (not yet stable after steps_to_converge - 1 steps)":
				steps = steps_to_converge - 1 => stable;
			
			----------------------------------------------------------------------------
			--LEMMAS (We expect these to be true and to potentially help the model checker prove the guarantees)
			----------------------------------------------------------------------------			
				
			lemma "UAV1 stays in bounds":
				0.0 <= pos_UAV1 
				and pos_UAV1 <= DPSS_Constants.P_GLOBAL;
			
			lemma "UAV2 stays in bounds":
				0.0 <= pos_UAV2 
				and pos_UAV2 <= DPSS_Constants.P_GLOBAL;
					
			lemma "UAV3 stays in bounds":
				0.0 <= pos_UAV3 
				and pos_UAV3 <= DPSS_Constants.P_GLOBAL;
							
			lemma "UAV4 stays in bounds":
				0.0 <= pos_UAV4 
				and pos_UAV4 <= DPSS_Constants.P_GLOBAL;
						
			lemma "Once stable, stays stable":
				true -> pre(stable) => stable;
							
			lemma "Stable on and after steps_to_converge steps":
				steps >= steps_to_converge => stable;
			
			lemma "Stable implies deltaT = T/N":
				stable => deltaT = DPSS_Constants.Time_to_travel_full_length/DPSS_Constants.N_real;
			
			lemma "deltaT is strictly between 0 and T":
				true -> (
					deltaT > 0.0 
					and deltaT < DPSS_Constants.Time_to_travel_full_length
					);
			
			-- This is a good way to find the real time bound!
 			-- The lemma is valid for time < 2T but not for time < (2-1/N)T.
 			-- I believe it would be valid with (2-1/N)T if we only required one timestep of stability instead of two. 			
			lemma "Time to become stable is less than 2T":
				(stable and not (pre(stable))) => 
					(time < 2.0*DPSS_Constants.Time_to_travel_full_length);
			
		**};
		
	end DPSS_4_Vehicles.Impl;

end DPSS_4_Vehicles_Pkg;