package UxAS_responds_pkg
public
	--Included DataTypes
    with CMASI;
    with UXTASK;
    with UxAS_Node_Lib;
    
    -- Included Main Services
	with AutomationRequestValidatorService_Pkg;	
    
    process UxAS_responds
    	features
    		AutomationRequest_in: in event data port CMASI::AutomationRequest.i;
    		AutomationResponse_out: out event data port cmasi::AutomationResponse.i;
    	annex agree {**
    		    			
    		--Note: We do not accept a new request until the previous request has been responded to. 
    		--  The UxAS_Node_Lib.responds_exactly_once_within pattern ignores requests received while processing.
    		guarantee "(UxAS responds, 1 cpt, no errors) Upon receiving an AutomationRequest_in, 
				UxAS responds exactly once, on the next timestep, with an AutomationResponse_out.":
    			UxAS_Node_Lib.responds_exactly_once_within(
    				event(AutomationResponse_out), 
    				event(AutomationRequest_in), 
    				1
    			); 
    		
    	**};
    end UxAS_responds;
    
    process implementation UxAS_responds.i
    	subcomponents
    		 AutomationRequestValidatorService: thread AutomationRequestValidatorService_Pkg::AutomationRequestValidatorService;
    	connections
    		conn001: port AutomationRequest_in -> AutomationRequestValidatorService.AutomationRequest_in;
    		conn002: port AutomationRequestValidatorService.AutomationResponse_out -> AutomationResponse_out;
    	annex agree {**
    		lemma "Observe event(AutomationResponse_out)": 
    			not event(AutomationResponse_out);
    	**};
    end UxAS_responds.i;
    
end UxAS_responds_pkg;