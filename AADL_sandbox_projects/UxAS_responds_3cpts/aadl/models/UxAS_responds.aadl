package UxAS_responds_pkg
public
	--Included DataTypes
    with CMASI;
    with UXTASK;
    with UxAS_Node_Lib;
    
    -- Included Main Services
	with AutomationRequestValidatorService_Pkg;	
	with PlanBuilderService_Pkg;
	with TaskServiceBase_Pkg;
    
    process UxAS_responds
    	features
    		AutomationRequest_in: in event data port CMASI::AutomationRequest.i;
    		AutomationResponse_out: out event data port cmasi::AutomationResponse.i;
    	annex agree {**

    		--Note: We do not accept a new request until the previous request has been responded to.    		
    		assume "A new AutomationRequest is not made until 
    			an AutomationResponse has been sent to the previous request.":
    		UxAS_Node_Lib.one_request_at_a_time(event(AutomationResponse_out), event(AutomationRequest_in));
    		
    		
    		-- The NUM_STEPS is determined from the anticipated number of jumps necessary to complete
    		--    a single a single Request/Response chain.
    		-- For a 3 component case, there are 3 separate messages types being passed through the system.
    		--    Each message type has a Request/Response message pair: 
    		--    > Autonmation Rq/Rs
    		--    > UniqueAutomation Rq/Rs
    		--    > TaskImplementation Rq/Rs
    		-- Since the chain begins with the AutomationRequest (step 0) then is the number of (message types*2)-1
    		--    that represents the expected number of steps for the return AutomationResponse to 
    		eq NUM_STEPS : int = 5;
    					
    		--Note: The UxAS_Node_Lib.responds_exactly_once_within node ignores requests received 
    		--  while processing, and does not allow "spurious" responses.
    		guarantee "(UxAS responds, 3 cpts, no errors) Upon receiving an AutomationRequest_in, 
    			UxAS responds exactly once with an AutomationResponse_out within NUM_STEPS steps.":
    			UxAS_Node_Lib.responds_exactly_once_within(
    				event(AutomationResponse_out), 
    				event(AutomationRequest_in), 
    				NUM_STEPS
    			); 
    					
    	**};
    end UxAS_responds;
    
    process implementation UxAS_responds.i
    	subcomponents
    		AutomationRequestValidatorService: thread AutomationRequestValidatorService_Pkg::AutomationRequestValidatorService;
    		PlanBuilderService: thread PlanBuilderService_Pkg::PlanBuilderService;
    		TaskServiceBase: thread TaskServiceBase_Pkg::TaskServiceBase;
    	connections
    		-- Connection between Main System and AutomationRequestValidatorService : AutomationRq/Rs message pair
    		conn001: port AutomationRequest_in -> AutomationRequestValidatorService.AutomationRequest_in;
    		conn002: port AutomationRequestValidatorService.AutomationResponse_out -> AutomationResponse_out;
    		
    		-- Connection between AutomationRequestValidatorService and PlanBuilderService : UniqueAutomationRq/Rs message pair
    		conn011: port AutomationRequestValidatorService.UniqueAutomationRequest_out -> PlanBuilderService.UniqueAutomationRequest_in;
    	    conn012: port PlanBuilderService.UniqueAutomationResponse_out -> AutomationRequestValidatorService.UniqueAutomationResponse_in;
    	    
    	    -- Connection between PlanBuilderService and TaskServiceBase : TaskImplementationRq/Rs message pair
    	    conn021: port PlanBuilderService.TaskImplementationRequest_out -> TaskServiceBase.TaskImplementationRequest_in;
    	    conn022: port TaskServiceBase.TaskImplementationResponse_out -> PlanBuilderService.TaskImplementationResponse_in;
 
    	annex agree {**
    		lemma "Observe event(AutomationResponse_out)": 
    			not event(AutomationResponse_out);
    	**};
    end UxAS_responds.i;
    
end UxAS_responds_pkg;