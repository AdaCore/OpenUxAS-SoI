package DPSS_3_Vehicles_Pkg
public
	with Base_Types;
	with DPSS_Data_Types;
	with DPSS_Node_Lib;
	with DPSS_Constants;
	with UAV_Pkg;
	
	system DPSS_3_Vehicles
		features
			--Inputs:
			initial_pos_UAV1 : in data port DPSS_Data_Types::Position_Type;
			suggested_initial_direction_UAV1 : in data port DPSS_Data_Types::Direction_Type;
			initial_pos_UAV2 : in data port DPSS_Data_Types::Position_Type;
			suggested_initial_direction_UAV2 : in data port DPSS_Data_Types::Direction_Type;
			initial_pos_UAV3 : in data port DPSS_Data_Types::Position_Type;
			suggested_initial_direction_UAV3 : in data port DPSS_Data_Types::Direction_Type;
			
			--Outputs:
			pos_UAV1 : out data port DPSS_Data_Types::Position_Type;
			pos_UAV2 : out data port DPSS_Data_Types::Position_Type;
			pos_UAV3 : out data port DPSS_Data_Types::Position_Type;
			 
		annex agree {**
			
			eq direction_UAV1 : DPSS_Data_Types::Direction_Type;
			eq direction_UAV2 : DPSS_Data_Types::Direction_Type;
			eq direction_UAV3 : DPSS_Data_Types::Direction_Type;
	
			eq goal_UAV1 : DPSS_Data_Types::Position_Type;
			eq goal_UAV2 : DPSS_Data_Types::Position_Type;
			eq goal_UAV3 : DPSS_Data_Types::Position_Type;
			
			--Shared border positions
			eq S_12 : DPSS_Data_Types::Position_Type = 
				1.0*DPSS_Constants.P_GLOBAL/DPSS_Constants.N_real;  
			eq S_23 : DPSS_Data_Types::Position_Type = 
				2.0*DPSS_Constants.P_GLOBAL/DPSS_Constants.N_real;
			
			--Previous positions
			eq pre_pos_UAV1 : DPSS_Data_Types::Position_Type = 
				prev(pos_UAV1, initial_pos_UAV1);
			eq pre_pos_UAV2 : DPSS_Data_Types::Position_Type = 
				prev(pos_UAV2, initial_pos_UAV2);
			eq pre_pos_UAV3 : DPSS_Data_Types::Position_Type = 
				prev(pos_UAV3, initial_pos_UAV3);
			
			--Previous directions
			eq pre_direction_UAV1 : DPSS_Data_Types::Direction_Type = 
				prev(direction_UAV1, suggested_initial_direction_UAV1);
			eq pre_direction_UAV2 : DPSS_Data_Types::Direction_Type = 
				prev(direction_UAV2, suggested_initial_direction_UAV2);
			eq pre_direction_UAV3 : DPSS_Data_Types::Direction_Type = 
				prev(direction_UAV3, suggested_initial_direction_UAV3);
			
			--Previous goals
			eq pre_goal_UAV1 : DPSS_Data_Types::Position_Type = 
				prev(goal_UAV1, (if direction_UAV1 = 1 then DPSS_Constants.P_GLOBAL else 0.0));
			eq pre_goal_UAV2 : DPSS_Data_Types::Position_Type = 
				prev(goal_UAV2, (if direction_UAV2 = 1 then DPSS_Constants.P_GLOBAL else 0.0));
			eq pre_goal_UAV3 : DPSS_Data_Types::Position_Type = 
				prev(goal_UAV3, (if direction_UAV3 = 1 then DPSS_Constants.P_GLOBAL else 0.0));
						
			--Times to reach neighbors													
			eq time_to_reach_neighbor_12 : DPSS_Data_Types::Time_Type = 
				DPSS_Node_Lib.time_to_reach_neighbor(pre_direction_UAV1,
														pre_direction_UAV2,
														pre_pos_UAV1,
														pre_pos_UAV2
														);
																		
			eq time_to_reach_neighbor_23 : DPSS_Data_Types::Time_Type = 
				DPSS_Node_Lib.time_to_reach_neighbor(pre_direction_UAV2,
														pre_direction_UAV3,
														pre_pos_UAV2,
														pre_pos_UAV3
														);
			
			--Times to reach goals
			eq time_until_UAV1_reaches_goal : DPSS_Data_Types::Time_Type = 
				DPSS_Node_Lib.time_to_reach_target_position(
					pre_direction_UAV1, 
					pre_pos_UAV1, 
					pre_goal_UAV1
				);
				
			eq time_until_UAV2_reaches_goal : DPSS_Data_Types::Time_Type = 
				DPSS_Node_Lib.time_to_reach_target_position(
					pre_direction_UAV2, 
					pre_pos_UAV2, 
					pre_goal_UAV2
				);
				
			eq time_until_UAV3_reaches_goal : DPSS_Data_Types::Time_Type = 
				DPSS_Node_Lib.time_to_reach_target_position(
					pre_direction_UAV3, 
					pre_pos_UAV3, 
					pre_goal_UAV3
				);
			
			eq deltaT : DPSS_Data_Types::Time_Type = DPSS_Node_Lib.min_time(time_until_UAV1_reaches_goal,
								DPSS_Node_Lib.min_time(time_until_UAV2_reaches_goal,
									DPSS_Node_Lib.min_time(time_until_UAV3_reaches_goal,
										DPSS_Node_Lib.min_time(time_to_reach_neighbor_12,
											time_to_reach_neighbor_23))));
			
			-----------------------------------------------------
			--ASSUMPTIONS
			-----------------------------------------------------
			
			assume "time update": time = (0.0 -> pre(time) + deltaT);
			
			assume "UAVs are numbered according to their position from left to right":
				(initial_pos_UAV1 <= initial_pos_UAV2
				and initial_pos_UAV2 <= initial_pos_UAV3)
				-> true;
				
			assume "Initial positions are between 0 and P_GLOBAL":
				(0.0 <= initial_pos_UAV1 
				and initial_pos_UAV1 <= DPSS_Constants.P_GLOBAL
				and 0.0 <= initial_pos_UAV2 
				and initial_pos_UAV2 <= DPSS_Constants.P_GLOBAL
				and 0.0 <= initial_pos_UAV3 
				and initial_pos_UAV3 <= DPSS_Constants.P_GLOBAL)
				-> true;
				
			assume "Suggested initial directions are LEFT or RIGHT":
				((suggested_initial_direction_UAV1 = DPSS_Constants.LEFT
					or suggested_initial_direction_UAV1 = DPSS_Constants.RIGHT)
				and (suggested_initial_direction_UAV2 = DPSS_Constants.LEFT
					or suggested_initial_direction_UAV2 = DPSS_Constants.RIGHT)
				and (suggested_initial_direction_UAV3 = DPSS_Constants.LEFT
					or suggested_initial_direction_UAV3 = DPSS_Constants.RIGHT))
				-> true;

			-----------------------------------------------------
			--GUARANTEES
			-----------------------------------------------------
			
			-- Main Theorem			
			guarantee "Theorem 1 for Algorithm A for 3 Vehicles":
				(time >= ((2.0*DPSS_Constants.N_real - 1.0)/DPSS_Constants.N_real)*DPSS_Constants.Time_to_travel_full_length) =>
					((((pos_UAV1 = 0.0 and pos_UAV2 = S_23 and pos_UAV3 = S_23)
							and (pre_pos_UAV1 = S_12 and pre_pos_UAV2 = S_12 and pre_pos_UAV3 = DPSS_Constants.P_GLOBAL))
						or ((pos_UAV1 = S_12 and pos_UAV2 = S_12 and pos_UAV3 = DPSS_Constants.P_GLOBAL)
							and (pre_pos_UAV1 = 0.0 and pre_pos_UAV2 = S_23 and pre_pos_UAV3 = S_23)
						))
					and 
						(deltaT = DPSS_Constants.Time_to_travel_full_length/DPSS_Constants.N_real)
					);
			
			guarantee "Initial positions are the input initial positions":
				(pos_UAV1 = initial_pos_UAV1
				and pos_UAV2 = initial_pos_UAV2
				and pos_UAV3 = initial_pos_UAV3) -> true;
			
			guarantee "Goals are in bounds":
				0.0 <= goal_UAV1
				and goal_UAV1 <= DPSS_Constants.P_GLOBAL
				and 0.0 <= goal_UAV2
				and goal_UAV2 <= DPSS_Constants.P_GLOBAL
				and 0.0 <= goal_UAV3
				and goal_UAV3 <= DPSS_Constants.P_GLOBAL;	
			
			guarantee "Positions are in bounds":
				0.0 <= pos_UAV1 
				and pos_UAV1 <= DPSS_Constants.P_GLOBAL
				and 0.0 <= pos_UAV2 
				and pos_UAV2 <= DPSS_Constants.P_GLOBAL
				and 0.0 <= pos_UAV3 
				and pos_UAV3 <= DPSS_Constants.P_GLOBAL;
			
			guarantee "UAVs turn around at the borders":
				pos_UAV1 = 0.0 => direction_UAV1 = 1
				and pos_UAV1 = DPSS_Constants.P_GLOBAL => direction_UAV1 = -1
				and pos_UAV2 = 0.0 => direction_UAV2 = 1
				and pos_UAV2 = DPSS_Constants.P_GLOBAL => direction_UAV2 = -1
				and pos_UAV3 = 0.0 => direction_UAV3 = 1
				and pos_UAV3 = DPSS_Constants.P_GLOBAL => direction_UAV3 = -1;
				
			guarantee "Directions are in bounds":
				(direction_UAV1 = 1 or direction_UAV1 = -1)
				and (direction_UAV2 = 1 or direction_UAV2 = -1)
				and (direction_UAV3 = 1 or direction_UAV3 = -1);
			
		**};
		
	end DPSS_3_Vehicles;

	system implementation DPSS_3_Vehicles.Impl
		subcomponents
			UAV1: system UAV_Pkg::UAV;
			UAV2: system UAV_Pkg::UAV;
			UAV3: system UAV_Pkg::UAV;
			
		connections
			sug_init_dir_UAV1: port	suggested_initial_direction_UAV1 -> UAV1.suggested_initial_direction;
			sug_init_dir_UAV2: port	suggested_initial_direction_UAV2 -> UAV2.suggested_initial_direction;
			sug_init_dir_UAV3: port	suggested_initial_direction_UAV3 -> UAV3.suggested_initial_direction;
			init_pos_UAV1: port initial_pos_UAV1 -> UAV1.initial_position;
			init_pos_UAV2: port initial_pos_UAV2 -> UAV2.initial_position;
			init_pos_UAV3: port initial_pos_UAV3 -> UAV3.initial_position;
			pos_UAV1_to_UAV2 : port UAV1.pos -> UAV2.pos_LN;
			pos_UAV2_to_UAV1 : port UAV2.pos -> UAV1.pos_RN;
			pos_UAV2_to_UAV3 : port UAV2.pos -> UAV3.pos_LN;
			pos_UAV3_to_UAV2 : port UAV3.pos -> UAV2.pos_RN;
			pos_UAV1_output : port UAV1.pos -> pos_UAV1;
			pos_UAV2_output : port UAV2.pos -> pos_UAV2;
			pos_UAV3_output : port UAV3.pos -> pos_UAV3;
						
		annex agree {**

			--UAV1 output
			assign direction_UAV1 = UAV1.direction;
			assign goal_UAV1 = UAV1.goal;
			
			--UAV1 inputs
			--Since the leftmost UAV has no left neighbor, set pos_LN to something to the left of the left endpoint (so UAV1 never meets its "phantom" neighbor).
			assert UAV1.pos_LN = -1.0; 
			assert UAV1.id = 1;
						
			--UAV2 outputs
			assign direction_UAV2 = UAV2.direction;
			assign goal_UAV2 = UAV2.goal;
			
			--UAV2 inputs
			assert UAV2.id = 2;
							
			--UAV3 outputs
			assign direction_UAV3 = UAV3.direction;
			assign goal_UAV3 = UAV3.goal;
			
			--UAV3 inputs
			--Since the rightmost UAV has no right neighbor, set pos_RN to something to the right of the right endpoint (so UAVN never meets its "phantom" neighbor).
			assert UAV3.pos_RN = DPSS_Constants.P_GLOBAL + 1.0;
			assert UAV3.id = 3;
			
			lemma "Observer: UAV1 and UAV2 traveling toward each other":
				not (
					DPSS_Node_Lib.initial_value_true(direction_UAV1 = 1) 
				and DPSS_Node_Lib.initial_value_true(direction_UAV2 = -1)
				and DPSS_Node_Lib.initial_value_true(pos_UAV1 = 3.0)
				and DPSS_Node_Lib.initial_value_true(pos_UAV2 = 8.0)
				and time > 20.0
				);
						
			lemma "Observer: Slow to Converge":
				not (
				(((pos_UAV1 = 0.0 and pos_UAV2 = S_23 and pos_UAV3 = S_23)
							and (pre_pos_UAV1 = S_12 and pre_pos_UAV2 = S_12 and pre_pos_UAV3 = DPSS_Constants.P_GLOBAL))
						or ((pos_UAV1 = S_12 and pos_UAV2 = S_12 and pos_UAV3 = DPSS_Constants.P_GLOBAL)
							and (pre_pos_UAV1 = 0.0 and pre_pos_UAV2 = S_23 and pre_pos_UAV3 = S_23)
						))
				and DPSS_Node_Lib.initial_value_true(direction_UAV1 = 1)
				and DPSS_Node_Lib.initial_value_true(direction_UAV2 = 1)
				and DPSS_Node_Lib.initial_value_true(direction_UAV3 = 1)
				and DPSS_Node_Lib.initial_value_true(pos_UAV1 = 0.0)
				and DPSS_Node_Lib.initial_value_true(pos_UAV2 = 0.01)
				and DPSS_Node_Lib.initial_value_true(pos_UAV3 = 0.02)
				);
			
			lemma "UAV1 stays in bounds":
				0.0 <= pos_UAV1 
				and pos_UAV1 <= DPSS_Constants.P_GLOBAL;
			
			lemma "UAV2 stays in bounds":
				0.0 <= pos_UAV2 
				and pos_UAV2 <= DPSS_Constants.P_GLOBAL;
					
			lemma "UAV3 stays in bounds":
				0.0 <= pos_UAV3 
				and pos_UAV3 <= DPSS_Constants.P_GLOBAL;
				
		**};
		
	end DPSS_3_Vehicles.Impl;

end DPSS_3_Vehicles_Pkg;