package DPSS_2_Vehicles_LearnN_Pkg
public
	with DPSS_Data_Types;
	with DPSS_Node_Lib;
	with DPSS_Constants;
	with UAV_Pkg;
	
	system DPSS_2_Vehicles_LearnN
		features
			-----------------------------------------------------
			--INPUTS
			-----------------------------------------------------
			
			--Initial positions
			initial_pos_UAV1 : in data port DPSS_Data_Types::Position_Type;
			initial_pos_UAV2 : in data port DPSS_Data_Types::Position_Type;

			--Suggested initial directions
			suggested_initial_direction_UAV1 : in data port DPSS_Data_Types::Direction_Type;
			suggested_initial_direction_UAV2 : in data port DPSS_Data_Types::Direction_Type;
			
			-----------------------------------------------------
			--OUTPUTS
			-----------------------------------------------------

			pos_UAV1 : out data port DPSS_Data_Types::Position_Type;
			pos_UAV2 : out data port DPSS_Data_Types::Position_Type;
			 
		annex agree {**
			
			-----------------------------------------------------
			--CONSTANTS
			-----------------------------------------------------
			
			--Constants that the vehicles don't know a priori (so they are only defined at the top-level)
--			const RIGHT_ENDP_TRUTH : real = 200.0;
--			const LEFT_ENDP_TRUTH  : real = -100.0;
--			const P_TRUTH : real = RIGHT_ENDP_TRUTH - LEFT_ENDP_TRUTH;
--			const Time_to_travel_full_length : DPSS_Data_Types::Time_Type = P_TRUTH/DPSS_Constants.V;
			const N_real : real = 2.0;

			-----------------------------------------------------
			--EQ (STATE) VARIABLES
			-----------------------------------------------------
											 
			--Directions
			eq direction_UAV1 : DPSS_Data_Types::Direction_Type;
			eq direction_UAV2 : DPSS_Data_Types::Direction_Type;
		
			--Goals
			eq goal_UAV1 : DPSS_Data_Types::Position_Type;
			eq goal_UAV2 : DPSS_Data_Types::Position_Type;
			
			--Shared border positions
			eq S_12 : DPSS_Data_Types::Position_Type = 
				1.0*DPSS_Constants.P_TRUTH/N_real + DPSS_Constants.LEFT_ENDP_TRUTH;
				  		
			--Previous positions
			eq pre_pos_UAV1 : DPSS_Data_Types::Position_Type = prev(pos_UAV1, initial_pos_UAV1);
			eq pre_pos_UAV2 : DPSS_Data_Types::Position_Type = prev(pos_UAV2, initial_pos_UAV2);
			
			--Previous directions
			eq pre_direction_UAV1 : DPSS_Data_Types::Direction_Type = prev(direction_UAV1, suggested_initial_direction_UAV1);
			eq pre_direction_UAV2 : DPSS_Data_Types::Direction_Type = prev(direction_UAV2, suggested_initial_direction_UAV2);
			
			--Previous goals
			eq pre_goal_UAV1 : DPSS_Data_Types::Position_Type = prev(goal_UAV1, (if direction_UAV1 = 1 then DPSS_Constants.RIGHT_ENDP_TRUTH else DPSS_Constants.LEFT_ENDP_TRUTH));
			eq pre_goal_UAV2 : DPSS_Data_Types::Position_Type = prev(goal_UAV2, (if direction_UAV2 = 1 then DPSS_Constants.RIGHT_ENDP_TRUTH else DPSS_Constants.LEFT_ENDP_TRUTH));
						
			--Times to reach neighbors													
			eq time_to_reach_neighbor_12 : DPSS_Data_Types::Time_Type = 
				DPSS_Node_Lib.time_to_reach_neighbor(pre_direction_UAV1,
														pre_direction_UAV2,
														pre_pos_UAV1,
														pre_pos_UAV2
														);
			--Times to reach goals
			eq time_until_UAV1_reaches_goal : DPSS_Data_Types::Time_Type = 
				DPSS_Node_Lib.time_to_reach_target_position(
					pre_direction_UAV1, 
					pre_pos_UAV1, 
					pre_goal_UAV1
				);
			
			eq time_until_UAV2_reaches_goal : DPSS_Data_Types::Time_Type = 
				DPSS_Node_Lib.time_to_reach_target_position(
					pre_direction_UAV2, 
					pre_pos_UAV2, 
					pre_goal_UAV2
				);
			
			--Time until UAVN reaches right endpoint	
			eq time_until_UAVN_reaches_right_endp : DPSS_Data_Types::Time_Type = 
				DPSS_Node_Lib.time_to_reach_target_position(
					pre_direction_UAV2, 
					pre_pos_UAV2, 
					DPSS_Constants.RIGHT_ENDP_TRUTH
				);
			
			--Time until UAV1 reaches left endpoint	
			eq time_until_UAV1_reaches_left_endp : DPSS_Data_Types::Time_Type = 
				DPSS_Node_Lib.time_to_reach_target_position(
					pre_direction_UAV1,
					pre_pos_UAV1,
					DPSS_Constants.LEFT_ENDP_TRUTH
				);
				
			eq deltaT : DPSS_Data_Types::Time_Type =
							--Times to reach goals
							DPSS_Node_Lib.min_pos_time(time_until_UAV1_reaches_goal,
							DPSS_Node_Lib.min_pos_time(time_until_UAV2_reaches_goal,
							--Times to reach neighbors
														time_to_reach_neighbor_12));
			
			eq stable : bool = 
				--Either
				(	--the UAVs are at LEFT_ENDP_TRUTH and RIGHT_ENDP_TRUTH, respectively
					(
						pos_UAV1 = DPSS_Constants.LEFT_ENDP_TRUTH and 
						pos_UAV2 = DPSS_Constants.RIGHT_ENDP_TRUTH
					)
					--and were previously at S_12 and S_12, 
					and (
						pre_pos_UAV1 = S_12 and 
						pre_pos_UAV2 = S_12 
					)
				)
				--or
				or (--the UAVs are at S_12 and S_12, respectively
					(
						pos_UAV1 = S_12 and 
						pos_UAV2 = S_12 
					)
					--and were previously at LEFT_ENDP_TRUTH and RIGHT_ENDP_TRUTH, respectively
					and (
						pre_pos_UAV1 = DPSS_Constants.LEFT_ENDP_TRUTH and 
						pre_pos_UAV2 = DPSS_Constants.RIGHT_ENDP_TRUTH
					)
				);
						
			-----------------------------------------------------
			--ASSUMPTIONS
			-----------------------------------------------------
			
			assume "time update": time = (0.0 -> pre(time) + deltaT);	
			
			assume "UAVs are numbered according to their position from left to right":
				(	initial_pos_UAV1 <= initial_pos_UAV2)
				-> true;
			
			--We need this when the vehicles don't know the boundaries, they can't start out co-located.
			--Otherwise, they can end up bouncing back and forth between the boundaries together.
			assume "UAVs are not co-located on the initial timestep":
				(	initial_pos_UAV1 < initial_pos_UAV2)
				-> true;
				
			assume "Initial positions are between the left and right endpoints":
				(--Initial positions are >= LEFT_ENDP_TRUTH
					initial_pos_UAV1 >= DPSS_Constants.LEFT_ENDP_TRUTH 
				and	initial_pos_UAV2 >= DPSS_Constants.LEFT_ENDP_TRUTH
				--and initial positions are <= RIGHT_ENDP_TRUTH
				and initial_pos_UAV1 <= DPSS_Constants.RIGHT_ENDP_TRUTH
				and initial_pos_UAV2 <= DPSS_Constants.RIGHT_ENDP_TRUTH
 				)
				-> true;
				
			assume "Suggested initial directions are LEFT or RIGHT":
				((		suggested_initial_direction_UAV1 = DPSS_Constants.LEFT
					or  suggested_initial_direction_UAV1 = DPSS_Constants.RIGHT)
				and (	suggested_initial_direction_UAV2 = DPSS_Constants.LEFT
					or  suggested_initial_direction_UAV2 = DPSS_Constants.RIGHT)
				)
				-> true;

			-----------------------------------------------------
			--GUARANTEES
			-----------------------------------------------------
			
			-- Main Theorem			
			guarantee "Theorem 2 for Algorithm B for 3 Vehicles (with known N)":
				(time >= ((5.0*N_real - 1.0)/N_real)*DPSS_Constants.Time_to_travel_full_length) =>
					(stable	and deltaT = DPSS_Constants.Time_to_travel_full_length/N_real);
			
			guarantee "deltaT is positive":
				true -> deltaT > 0.0;
			
			guarantee "Initial positions are the input initial positions":
				(	pos_UAV1 = initial_pos_UAV1
				and pos_UAV2 = initial_pos_UAV2
				) -> true;
			
			guarantee "Goals are in bounds":
				--Goals are >= LEFT_ENDP_TRUTH
					goal_UAV1 >= DPSS_Constants.LEFT_ENDP_TRUTH
				and goal_UAV2 >= DPSS_Constants.LEFT_ENDP_TRUTH
				--and goals are <= RIGHT_ENDP_TRUTH
				and goal_UAV1 <= DPSS_Constants.RIGHT_ENDP_TRUTH
				and goal_UAV2 <= DPSS_Constants.RIGHT_ENDP_TRUTH;	
			
			guarantee "Positions are in bounds":
				--Positions are >= LEFT_ENDP_TRUTH
					pos_UAV1 >= DPSS_Constants.LEFT_ENDP_TRUTH
				and pos_UAV2 >= DPSS_Constants.LEFT_ENDP_TRUTH
				--and positions are <= RIGHT_ENDP_TRUTH
				and pos_UAV1 <= DPSS_Constants.RIGHT_ENDP_TRUTH
				and pos_UAV2 <= DPSS_Constants.RIGHT_ENDP_TRUTH;
			
			guarantee "UAVs stay in order":
					pos_UAV1 <= pos_UAV2;
					
			guarantee "UAVs turn around at the borders":
				--UAVs turn around at left endpoint
					pos_UAV1 = DPSS_Constants.LEFT_ENDP_TRUTH => direction_UAV1 = 1
				and pos_UAV2 = DPSS_Constants.LEFT_ENDP_TRUTH => direction_UAV2 = 1
				--and UAVs turn around at right endpoint
				and pos_UAV1 = DPSS_Constants.RIGHT_ENDP_TRUTH => direction_UAV1 = -1
				and pos_UAV2 = DPSS_Constants.RIGHT_ENDP_TRUTH => direction_UAV2 = -1;
				
			guarantee "Directions are in bounds":
				(	 direction_UAV1 = 1 or direction_UAV1 = -1
				and	 direction_UAV2 = 1 or direction_UAV2 = -1
				);
			
		**};
		
	end DPSS_2_Vehicles_LearnN;

	system implementation DPSS_2_Vehicles_LearnN.Impl
		subcomponents
			UAV1: system UAV_Pkg::UAV;
			UAV2: system UAV_Pkg::UAV;
			
		connections
			
			--Suggested initial directions
			sug_init_dir_UAV1: port	suggested_initial_direction_UAV1 -> UAV1.suggested_initial_direction;
			sug_init_dir_UAV2: port	suggested_initial_direction_UAV2 -> UAV2.suggested_initial_direction;
			
			--Initial positions
			init_pos_UAV1: port initial_pos_UAV1 -> UAV1.initial_position;
			init_pos_UAV2: port initial_pos_UAV2 -> UAV2.initial_position;
			
			--Share perimRight with left neighbor (get right neighbor's perimRight)
--			perimRight_UAV2_to_UAV1 : port UAV2.perimRight -> UAV1.perimRight_RN;
			
			--Share perimLeft with right neighbor (get left neighbor's perimLeft)
--			perimLeft_UAV1_to_UAV2 : port UAV1.perimLeft -> UAV2.perimLeft_LN;

			--Share numRight with left neighbor (get right neighbor's numRight)
			numRight_UAV2_to_UAV1 : port UAV2.numRight -> UAV1.numRight_RN;
			
			--Share numLeft with right neighbor (get left neighbor's numLeft)
			numLeft_UAV1_to_UAV2 : port UAV1.numLeft -> UAV2.numLeft_LN;
				 		
		annex agree {**

			--Set UAV IDs
			--We use assertions since the IDs are not system-level inputs that we can pass through
--			assert UAV1.id = 1.0;
--			assert UAV2.id = 2.0;

			--Assign direction variables (used at the system level)
			assign direction_UAV1 = UAV1.direction;
			assign direction_UAV2 = UAV2.direction;
			
			--Assign goal variables (used at the system level)
			assign goal_UAV1 = UAV1.goal;			
			assign goal_UAV2 = UAV2.goal;
									
			--Assign positions
			assign pos_UAV1 = (initial_pos_UAV1 -> (if pre_direction_UAV1 = 1 then pre_pos_UAV1 + DPSS_Constants.V*(time - pre(time)) else pre_pos_UAV1 - DPSS_Constants.V*(time - pre(time))));
			assign pos_UAV2 = (initial_pos_UAV2 -> (if pre_direction_UAV2 = 1 then pre_pos_UAV2 + DPSS_Constants.V*(time - pre(time)) else pre_pos_UAV2 - DPSS_Constants.V*(time - pre(time))));
			
			--Set the meet_LN variables for each UAV
			assert UAV1.meet_LN = false; --There is no left neighbor to UAV1
			assert UAV2.meet_LN = (pos_UAV2 = pos_UAV1);
			
			--Set the meet_RN variables for each UAV
			assert UAV1.meet_RN = (pos_UAV1 = pos_UAV2);
			assert UAV2.meet_RN = false; --There is no right neighbor to UAVN
		
			--Tell the vehicles their current positions
			assert UAV1.pos = pos_UAV1;	
			assert UAV2.pos = pos_UAV2;
			
			--Tell the vehicles right_endp_truth (so they know when they hit the right endpoint)
--			assert UAV1.right_endp_truth = RIGHT_ENDP_TRUTH;	
--			assert UAV2.right_endp_truth = RIGHT_ENDP_TRUTH;
		
			--Tell the vehicles left_endp_truth (so they know when they hit the left endpoint)
--			assert UAV1.left_endp_truth = LEFT_ENDP_TRUTH;
--			assert UAV2.left_endp_truth = LEFT_ENDP_TRUTH;
		
			--Used in lemmas
			eq steps : int = 1 -> pre(steps + 1);
			
			--Expected number of steps it takes to converge to the stable configuration
			--This might be more for unknown N and P
			eq steps_to_converge : int = 11;
			
			----------------------------------------------------------------------------
			--OBSERVERS (Invalid lemmas that produce examples of behavior of interest)
			----------------------------------------------------------------------------
						
			lemma "Observer: Worst time convergence":
				not (
					stable
					--Initially, all UAVs are heading to the left
					and DPSS_Node_Lib.initial_value_true(direction_UAV1 = -1)
					and DPSS_Node_Lib.initial_value_true(direction_UAV2 = -1)
					--and the UAVs are located close together on the right end of the perimeter (but just shy of the right boundary)
					and DPSS_Node_Lib.initial_value_true(pos_UAV1 = DPSS_Constants.RIGHT_ENDP_TRUTH - 0.02)
					and DPSS_Node_Lib.initial_value_true(pos_UAV2 = DPSS_Constants.RIGHT_ENDP_TRUTH - 0.01)
				);
		
			lemma "Observer: Worst steps convergence (not yet stable after 5 steps)": 
				steps >= 5 => stable;
				
--			lemma "Observer: Worst steps convergence (not yet stable after steps_to_converge - 1 steps)":
--				steps = steps_to_converge - 1 => stable;
							
			----------------------------------------------------------------------------
			--LEMMAS (We expect these to be true and to potentially help the model checker prove the guarantees)
			----------------------------------------------------------------------------			

			--UAVs stay in bounds (prove one at a time)	
			lemma "UAV1 stays in bounds": DPSS_Constants.LEFT_ENDP_TRUTH <= pos_UAV1 and pos_UAV1 <= DPSS_Constants.RIGHT_ENDP_TRUTH;		
			lemma "UAV2 stays in bounds": DPSS_Constants.LEFT_ENDP_TRUTH <= pos_UAV2 and pos_UAV2 <= DPSS_Constants.RIGHT_ENDP_TRUTH;
							
			lemma "Once stable, stays stable":
				true -> pre(stable)	=> stable;					
													
--			lemma "Stable on and after steps_to_converge steps": 
--				steps >= steps_to_converge => stable;

			lemma "Stable on and after 6 steps": 
				steps >= 6 => stable;
													
			lemma "Stable implies deltaT = T/N":
				stable => deltaT = DPSS_Constants.Time_to_travel_full_length/N_real;
			
			lemma "deltaT is between 0 and T":
				true -> (
					deltaT > 0.0 
					and deltaT <= DPSS_Constants.Time_to_travel_full_length
					);

			-- This is a good way to find the real time bound!	
			lemma "Time to become stable is less than 3T":
				(stable and not (pre(stable))) => 
					(time < 3.0*DPSS_Constants.Time_to_travel_full_length);
								
		**};
		
	end DPSS_2_Vehicles_LearnN.Impl;

end DPSS_2_Vehicles_LearnN_Pkg;