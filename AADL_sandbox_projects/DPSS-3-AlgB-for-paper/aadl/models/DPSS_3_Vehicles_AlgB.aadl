package DPSS_3_Vehicles_AlgB_Pkg
public
	--with DPSS_Data_Types;
	with Base_Types;
	with DPSS_Node_Lib;
	with DPSS_Constants;
	with UAV_Pkg;
	
	system DPSS_3_Vehicles_AlgB
		features
			-----------------------------------------------------
			--INPUTS
			-----------------------------------------------------
			
			--Initial positions
			initial_pos_UAV1 : in data port Base_Types::Float;
			initial_pos_UAV2 : in data port Base_Types::Float;
			initial_pos_UAV3 : in data port Base_Types::Float;
						
			--Suggested initial directions
			suggested_initial_direction_UAV1 : in data port Base_Types::Integer;
			suggested_initial_direction_UAV2 : in data port Base_Types::Integer;
			suggested_initial_direction_UAV3 : in data port Base_Types::Integer;
			
			-----------------------------------------------------
			--OUTPUTS
			-----------------------------------------------------

			pos_UAV1 : out data port Base_Types::Float;
			pos_UAV2 : out data port Base_Types::Float;
			pos_UAV3 : out data port Base_Types::Float;
			 
		annex agree {**
			
			-----------------------------------------------------
			--CONSTANTS
			-----------------------------------------------------
			
			--Constants that the vehicles don't know a priori (so they are only defined at the top-level)
			const RIGHT_ENDP_TRUTH : real = 10.0;
			const LEFT_ENDP_TRUTH  : real = 0.0;
			const P_TRUTH : real = RIGHT_ENDP_TRUTH - LEFT_ENDP_TRUTH;
			const T : real = P_TRUTH/DPSS_Constants.V;
			const N_TRUTH_REAL : real = 3.0; --Number of vehicles
			const N_TRUTH_INT : int = 3; --Number of vehicles

			-----------------------------------------------------
			--EQ (STATE) VARIABLES
			-----------------------------------------------------
			
			--Directions						 
			eq direction_UAV1 : int;
			eq direction_UAV2 : int;
			eq direction_UAV3 : int;
	
			--Goals
			eq goal_UAV1 : real;
			eq goal_UAV2 : real;
			eq goal_UAV3 : real;
			
			--numLefts
			eq numLeft_UAV1 : int;
			eq numLeft_UAV2 : int;
			eq numLeft_UAV3 : int;
			
			--numRights
			eq numRight_UAV1 : int;
			eq numRight_UAV2 : int; 
			eq numRight_UAV3 : int;
			
			--perimLefts
			eq perimLeft_UAV1 : real;
			eq perimLeft_UAV2 : real;
			eq perimLeft_UAV3 : real;
			
			--perimRights
			eq perimRight_UAV1 : real;
			eq perimRight_UAV2 : real;
			eq perimRight_UAV3 : real;
			
			--Shared border positions
			eq S_12 : real = 1.0*P_TRUTH/N_TRUTH_REAL + LEFT_ENDP_TRUTH;  
			eq S_23 : real = 2.0*P_TRUTH/N_TRUTH_REAL + LEFT_ENDP_TRUTH;
			
			--Previous positions
			eq pre_pos_UAV1 : real = prev(pos_UAV1, initial_pos_UAV1);
			eq pre_pos_UAV2 : real = prev(pos_UAV2, initial_pos_UAV2);
			eq pre_pos_UAV3 : real = prev(pos_UAV3, initial_pos_UAV3);
			
			--Previous directions
			eq pre_direction_UAV1 : int = prev(direction_UAV1, suggested_initial_direction_UAV1);
			eq pre_direction_UAV2 : int = prev(direction_UAV2, suggested_initial_direction_UAV2);
			eq pre_direction_UAV3 : int = prev(direction_UAV3, suggested_initial_direction_UAV3);
			
			--Previous goals
			eq pre_goal_UAV1 : real = prev(goal_UAV1, (if direction_UAV1 = 1 then RIGHT_ENDP_TRUTH else LEFT_ENDP_TRUTH));
			eq pre_goal_UAV2 : real = prev(goal_UAV2, (if direction_UAV2 = 1 then RIGHT_ENDP_TRUTH else LEFT_ENDP_TRUTH));									
			eq pre_goal_UAV3 : real = prev(goal_UAV3, (if direction_UAV3 = 1 then RIGHT_ENDP_TRUTH else LEFT_ENDP_TRUTH));
			
			--Times to reach neighbors													
			eq time_to_reach_neighbor_12 : real = 
				DPSS_Node_Lib.time_to_reach_neighbor(pre_direction_UAV1,
														pre_direction_UAV2,
														pre_pos_UAV1,
														pre_pos_UAV2
														);
																		
			eq time_to_reach_neighbor_23 : real = 
				DPSS_Node_Lib.time_to_reach_neighbor(pre_direction_UAV2,
														pre_direction_UAV3,
														pre_pos_UAV2,
														pre_pos_UAV3
														);
			
			--"Trimmed" times to reach goals. If reaching a fake endpoint, return value is -1.0.
			eq time_until_UAV1_reaches_goal_trimmed : real = 
				DPSS_Node_Lib.time_to_reach_target_position_trim_phony_endpoints(
									pre_direction_UAV1, 
									pre_pos_UAV1, 
									pre_goal_UAV1,
									pre(perimLeft_UAV1),
									pre(perimRight_UAV1),
									LEFT_ENDP_TRUTH,
									RIGHT_ENDP_TRUTH
				);
				
			eq time_until_UAV2_reaches_goal_trimmed : real = 
				DPSS_Node_Lib.time_to_reach_target_position_trim_phony_endpoints(
									pre_direction_UAV2, 
									pre_pos_UAV2, 
									pre_goal_UAV2,
									pre(perimLeft_UAV2),
									pre(perimRight_UAV2),
									LEFT_ENDP_TRUTH,
									RIGHT_ENDP_TRUTH
				);

			eq time_until_UAV3_reaches_goal_trimmed : real = 
				DPSS_Node_Lib.time_to_reach_target_position_trim_phony_endpoints(
									pre_direction_UAV3, 
									pre_pos_UAV3, 
									pre_goal_UAV3,
									pre(perimLeft_UAV3),
									pre(perimRight_UAV3),
									LEFT_ENDP_TRUTH,
									RIGHT_ENDP_TRUTH
				);
			
			--Time until UAVN reaches right endpoint	
			eq time_until_UAVN_reaches_right_endp : real = 
				DPSS_Node_Lib.time_to_reach_target_position(
					pre_direction_UAV3, 
					pre_pos_UAV3, 
					RIGHT_ENDP_TRUTH
				);
			
			--Time until UAV1 reaches left endpoint	
			eq time_until_UAV1_reaches_left_endp : real = 
				DPSS_Node_Lib.time_to_reach_target_position(
					pre_direction_UAV1,
					pre_pos_UAV1,
					LEFT_ENDP_TRUTH
				);
			
			eq deltaT : real =
							--Added time_until_UAVN_reaches_right_endp and time_until_UAV1_reaches_left_endp since the UAVs don't know a priori where the left and right endpoints are located.
							DPSS_Node_Lib.min_pos_time(time_until_UAVN_reaches_right_endp,
							DPSS_Node_Lib.min_pos_time(time_until_UAV1_reaches_left_endp,
							--Times to reach goals
							DPSS_Node_Lib.min_pos_time(time_until_UAV1_reaches_goal_trimmed,
							DPSS_Node_Lib.min_pos_time(time_until_UAV2_reaches_goal_trimmed,
							DPSS_Node_Lib.min_pos_time(time_until_UAV3_reaches_goal_trimmed,
							--Times to reach neighbors
							DPSS_Node_Lib.min_pos_time(time_to_reach_neighbor_12,
														time_to_reach_neighbor_23))))));
			
			--Configuration parameters have converged
			eq stable_config_params : bool =
					--numLefts have converged
						numLeft_UAV1 = 0
					and numLeft_UAV2 = 1
					and numLeft_UAV3 = 2
					--numRights have converged
					and numRight_UAV1 = 2
					and numRight_UAV2 = 1
					and numRight_UAV3 = 0
					--perimLefts have converged
					and perimLeft_UAV1 = pos_UAV1 - LEFT_ENDP_TRUTH
					and perimLeft_UAV2 = pos_UAV2 - LEFT_ENDP_TRUTH
					and perimLeft_UAV3 = pos_UAV3 - LEFT_ENDP_TRUTH
					--perimRights have converged
					and perimRight_UAV1 = RIGHT_ENDP_TRUTH - pos_UAV1
					and perimRight_UAV2 = RIGHT_ENDP_TRUTH - pos_UAV2
					and perimRight_UAV3 = RIGHT_ENDP_TRUTH - pos_UAV3; 

			eq stable : bool = 
				--Configuration parameters have converged
				stable_config_params
				--and
				and (
				--either
				(	--the UAVs are at LEFT_ENDP_TRUTH, S_23, and S_23, respectively
					(
						pos_UAV1 = LEFT_ENDP_TRUTH and 
						pos_UAV2 = S_23 and 
						pos_UAV3 = S_23 
					)
					--and were previously at S_12, S_12, and RIGHT_ENDP_TRUTH, respectively
					and (
						pre_pos_UAV1 = S_12 and 
						pre_pos_UAV2 = S_12 and 
						pre_pos_UAV3 = RIGHT_ENDP_TRUTH
					)
				)
				--or
				or (--the UAVs are at S_12, S_12, and RIGHT_ENDP_TRUTH, respectively
					(
						pos_UAV1 = S_12 and 
						pos_UAV2 = S_12 and 
						pos_UAV3 = RIGHT_ENDP_TRUTH
					)
					--and were previously at LEFT_ENDP_TRUTH, S_23, and S_23, respectively
					and (
						pre_pos_UAV1 = LEFT_ENDP_TRUTH and 
						pre_pos_UAV2 = S_23 and 
						pre_pos_UAV3 = S_23 
					)
				)
				);
						
			-----------------------------------------------------
			--ASSUMPTIONS
			-----------------------------------------------------
			
			assume "time update": time = (0.0 -> pre(time) + deltaT);
			
			assume "UAVs are numbered according to their position from left to right":
				(	initial_pos_UAV1 <= initial_pos_UAV2
				and initial_pos_UAV2 <= initial_pos_UAV3)
				-> true;
				
			--We need this when the vehicles don't know the boundaries; they can't start out co-located.
			--Otherwise, they can end up bouncing back and forth between the boundaries together.
			assume "UAVs are not co-located on the initial timestep":
				(	initial_pos_UAV1 < initial_pos_UAV2 
				and initial_pos_UAV2 < initial_pos_UAV3)
				-> true;
				
			assume "Initial positions are between the left and right endpoints":
				(--Initial positions are >= LEFT_ENDP_TRUTH
					initial_pos_UAV1 >= LEFT_ENDP_TRUTH 
				and	initial_pos_UAV2 >= LEFT_ENDP_TRUTH
				and	initial_pos_UAV3 >= LEFT_ENDP_TRUTH
				--and initial positions are <= RIGHT_ENDP_TRUTH
				and initial_pos_UAV1 <= RIGHT_ENDP_TRUTH
				and initial_pos_UAV2 <= RIGHT_ENDP_TRUTH
				and initial_pos_UAV3 <= RIGHT_ENDP_TRUTH
 				)
				-> true;
				
			assume "Suggested initial directions are LEFT or RIGHT":
				((			suggested_initial_direction_UAV1 = DPSS_Constants.LEFT
						or  suggested_initial_direction_UAV1 = DPSS_Constants.RIGHT)
					and (	suggested_initial_direction_UAV2 = DPSS_Constants.LEFT
						or 	suggested_initial_direction_UAV2 = DPSS_Constants.RIGHT)
					and (	suggested_initial_direction_UAV3 = DPSS_Constants.LEFT
						or 	suggested_initial_direction_UAV3 = DPSS_Constants.RIGHT)
				)
				-> true;

			-----------------------------------------------------
			--GUARANTEES
			-----------------------------------------------------
			
			-- Main Theorem, v1			
			guarantee "Theorem 2 for Algorithm B for 3 Vehicles (v1)":
				(time >= ((5.0*N_TRUTH_REAL - 1.0)/N_TRUTH_REAL)*T) =>
					(stable	and deltaT = T/N_TRUTH_REAL);
			
			--Main Theorem, v2
			guarantee "Theorem 2 for Algorithm B for 3 Vehicles (v2)":
				(time >= 5.0*T) =>
					(stable	and deltaT = T/N_TRUTH_REAL);
			
			guarantee "deltaT is positive":
				true -> deltaT > 0.0;
			
			guarantee "Initial positions are the input initial positions":
				(	pos_UAV1 = initial_pos_UAV1
				and pos_UAV2 = initial_pos_UAV2
				and pos_UAV3 = initial_pos_UAV3) -> true;
			
			guarantee "Positions are in bounds":
				--Positions are >= LEFT_ENDP_TRUTH
					pos_UAV1 >= LEFT_ENDP_TRUTH
				and pos_UAV2 >= LEFT_ENDP_TRUTH
				and pos_UAV3 >= LEFT_ENDP_TRUTH
				--and positions are <= RIGHT_ENDP_TRUTH
				and pos_UAV1 <= RIGHT_ENDP_TRUTH
				and pos_UAV2 <= RIGHT_ENDP_TRUTH
				and pos_UAV3 <= RIGHT_ENDP_TRUTH;
			
			guarantee "UAVs stay in order":
					pos_UAV1 <= pos_UAV2
				and pos_UAV2 <= pos_UAV3;
			
			guarantee "UAVs turn around at the borders":
				--UAVs turn around at left endpoint
					(pos_UAV1 = LEFT_ENDP_TRUTH => direction_UAV1 = 1)
				and (pos_UAV2 = LEFT_ENDP_TRUTH => direction_UAV2 = 1)
				and (pos_UAV3 = LEFT_ENDP_TRUTH => direction_UAV3 = 1)
				--and UAVs turn around at right endpoint
				and (pos_UAV1 = RIGHT_ENDP_TRUTH => direction_UAV1 = -1)
				and (pos_UAV2 = RIGHT_ENDP_TRUTH => direction_UAV2 = -1)
				and (pos_UAV3 = RIGHT_ENDP_TRUTH => direction_UAV3 = -1);
				
			guarantee "Directions are in bounds":
				(	 direction_UAV1 = 1 or direction_UAV1 = -1)
				and (direction_UAV2 = 1 or direction_UAV2 = -1)
				and (direction_UAV3 = 1 or direction_UAV3 = -1);
			
		**};
		
	end DPSS_3_Vehicles_AlgB;

	system implementation DPSS_3_Vehicles_AlgB.Impl
		subcomponents
			UAV1: system UAV_Pkg::UAV;
			UAV2: system UAV_Pkg::UAV;
			UAV3: system UAV_Pkg::UAV;
			
		connections
			
			--Suggested initial directions
			sug_init_dir_UAV1: port	suggested_initial_direction_UAV1 -> UAV1.suggested_initial_direction;
			sug_init_dir_UAV2: port	suggested_initial_direction_UAV2 -> UAV2.suggested_initial_direction;
			sug_init_dir_UAV3: port	suggested_initial_direction_UAV3 -> UAV3.suggested_initial_direction;
			
			--Initial positions
			init_pos_UAV1: port initial_pos_UAV1 -> UAV1.initial_position;
			init_pos_UAV2: port initial_pos_UAV2 -> UAV2.initial_position;
			init_pos_UAV3: port initial_pos_UAV3 -> UAV3.initial_position;
			
			--Share perimRight with left neighbor (get right neighbor's perimRight)
			perimRight_UAV2_to_UAV1 : port UAV2.perimRight -> UAV1.perimRight_RN;
			perimRight_UAV3_to_UAV2 : port UAV3.perimRight -> UAV2.perimRight_RN;

			--Share perimLeft with right neighbor (get left neighbor's perimLeft)
			perimLeft_UAV1_to_UAV2 : port UAV1.perimLeft -> UAV2.perimLeft_LN;
			perimLeft_UAV2_to_UAV3 : port UAV2.perimLeft -> UAV3.perimLeft_LN;

			--Share numRight with left neighbor (get right neighbor's numRight)
			numRight_UAV2_to_UAV1 : port UAV2.numRight -> UAV1.numRight_RN;
			numRight_UAV3_to_UAV2 : port UAV3.numRight -> UAV2.numRight_RN;
			
			--Share numLeft with with right neighbor (get left neighbor's numLeft)
			numLeft_UAV1_to_UAV2 : port UAV1.numLeft -> UAV2.numLeft_LN;
			numLeft_UAV2_to_UAV3 : port UAV2.numLeft -> UAV3.numLeft_LN;

						
		annex agree {**

			--Assign direction variables (used at the system level)
			assign direction_UAV1 = UAV1.direction;
			assign direction_UAV2 = UAV2.direction;			
			assign direction_UAV3 = UAV3.direction;
			
			--Assign goal variables (used at the system level)
			assign goal_UAV1 = UAV1.goal;
			assign goal_UAV2 = UAV2.goal;
			assign goal_UAV3 = UAV3.goal;			
			
			--Assign numLeft variables (used at the system level)
			assign numLeft_UAV1 = UAV1.numLeft;
			assign numLeft_UAV2 = UAV2.numLeft;
			assign numLeft_UAV3 = UAV3.numLeft;
			
			--Assign numRight variables (used at the system level)
			assign numRight_UAV1 = UAV1.numRight;
			assign numRight_UAV2 = UAV2.numRight;
			assign numRight_UAV3 = UAV3.numRight;
			
			--Assign perimLeft variables (used at the system level)
			assign perimLeft_UAV1 = UAV1.perimLeft;
			assign perimLeft_UAV2 = UAV2.perimLeft;
			assign perimLeft_UAV3 = UAV3.perimLeft;

			--Assign perimRight variables (used at the system level)
			assign perimRight_UAV1 = UAV1.perimRight;
			assign perimRight_UAV2 = UAV2.perimRight;
			assign perimRight_UAV3 = UAV3.perimRight;
			
			--Assign positions
			assign pos_UAV1 = (initial_pos_UAV1 -> (if pre_direction_UAV1 = 1 then pre_pos_UAV1 + DPSS_Constants.V*(time - pre(time)) else pre_pos_UAV1 - DPSS_Constants.V*(time - pre(time))));
			assign pos_UAV2 = (initial_pos_UAV2 -> (if pre_direction_UAV2 = 1 then pre_pos_UAV2 + DPSS_Constants.V*(time - pre(time)) else pre_pos_UAV2 - DPSS_Constants.V*(time - pre(time))));
			assign pos_UAV3 = (initial_pos_UAV3 -> (if pre_direction_UAV3 = 1 then pre_pos_UAV3 + DPSS_Constants.V*(time - pre(time)) else pre_pos_UAV3 - DPSS_Constants.V*(time - pre(time))));
		
			--Set the meet_LN variables for each UAV
			assert UAV1.meet_LN = false; --There is no left neighbor to UAV1
			assert UAV2.meet_LN = (pos_UAV2 = pos_UAV1);
			assert UAV3.meet_LN = (pos_UAV3 = pos_UAV2);
			
			--Set the meet_RN variables for each UAV
			assert UAV1.meet_RN = (pos_UAV1 = pos_UAV2);
			assert UAV2.meet_RN = (pos_UAV2 = pos_UAV3);
			assert UAV3.meet_RN = false; --There is no right neighbor to UAVN
		
			--Tell the vehicles their current positions
			assert UAV1.pos = pos_UAV1;	
			assert UAV2.pos = pos_UAV2;
			assert UAV3.pos = pos_UAV3;
			
			--Tell the vehicles right_endp_truth (so they know when they hit the right endpoint)
			assert UAV1.right_endp_truth = RIGHT_ENDP_TRUTH;	
			assert UAV2.right_endp_truth = RIGHT_ENDP_TRUTH;
			assert UAV3.right_endp_truth = RIGHT_ENDP_TRUTH;
		
			--Tell the vehicles left_endp_truth (so they know when they hit the left endpoint)
			assert UAV1.left_endp_truth = LEFT_ENDP_TRUTH;
			assert UAV2.left_endp_truth = LEFT_ENDP_TRUTH;
			assert UAV3.left_endp_truth = LEFT_ENDP_TRUTH;
			
			--Used in lemmas
			eq steps : int = 1 -> pre(steps) + 1;
			
			----------------------------------------------------------------------------
			--OBSERVERS (Invalid lemmas that produce examples of behavior of interest)
			----------------------------------------------------------------------------
						
			lemma "Observer: Nearly 3T convergence":
				not (
					stable
					and
					--Initially, ...
					DPSS_Node_Lib.initial_value_true(
					--all UAVs are heading to the left
						direction_UAV1 = -1
					and direction_UAV2 = -1
					and direction_UAV3 = -1
					--and the UAVs are located close together on the right end of the perimeter (but just shy of the right boundary)
					and pos_UAV1 = RIGHT_ENDP_TRUTH - 0.03
					and pos_UAV2 = RIGHT_ENDP_TRUTH - 0.02
					and pos_UAV3 = RIGHT_ENDP_TRUTH - 0.01
					--and UAVN starts out thinking there is no perimeter to its right
					and UAV3.perimRight = 0.0
					--and each UAV starts out thinking it is the only one
					and UAV1.numLeft = 0 and UAV1.numRight = 0
					and UAV2.numLeft = 0 and UAV2.numRight = 0
					and UAV3.numLeft = 0 and UAV3.numRight = 0
				));

			lemma "Observer: Worst time (nearly 4T) convergence":
				not (
					stable
					and
					steps = 14 --I know through experimentation how many steps it takes. Adding this constraint reduces the time it takes the model checker to find the CE.
					and 
					--Initially, ...
					DPSS_Node_Lib.initial_value_true(
					--all UAVs are heading to the right
						direction_UAV1 = 1
					and direction_UAV2 = 1
					and direction_UAV3 = 1
					--and the UAVs are located close together on the left end of the perimeter (but just shy of the left boundary)
					and pos_UAV1 = LEFT_ENDP_TRUTH + 0.01
					and pos_UAV2 = LEFT_ENDP_TRUTH + 0.02
					and pos_UAV3 = LEFT_ENDP_TRUTH + 0.03
					--and UAV1 starts out thinking there is a segment of length (N-1)*RIGHT_ENDP_TRUTH to its left
					and UAV1.perimLeft = (N_TRUTH_REAL - 1.0) * RIGHT_ENDP_TRUTH
					--and each UAV starts out thinking it is the only one
					and UAV1.numLeft = 0 and UAV1.numRight = 0
					and UAV2.numLeft = 0 and UAV2.numRight = 0
					and UAV3.numLeft = 0 and UAV3.numRight = 0
				));

			lemma "Observer: Config params are not yet converged after 3T":
				(steps = 11 --Through experimentation, we learned how many steps it takes to get such an observer. Adding this clause helps JKind find the observer faster. 
					and stable_config_params 
					and not (pre(stable_config_params))
				) => 
					(time <= 3.0*T);

			lemma "Observer: Config params are not yet converged after 3T (with initial positions set)":
				(--steps = 11 --Through experimentation, we learned how many steps it takes to get such an observer. Adding this clause helps JKind find the observer faster. 
					--and 
					stable_config_params 
					and not pre(stable_config_params)
					and DPSS_Node_Lib.initial_value_true(
							direction_UAV1 = 1
						and direction_UAV2 = -1
						and direction_UAV3 = -1
						and pos_UAV1 = 0.0046
						and pos_UAV2 = 8.5283
						and pos_UAV3 = 8.5610
						and UAV1.perimLeft = 10.0373
						and UAV2.perimLeft = 18.5637 and UAV2.perimRight = 1.5371
						and UAV3.perimRight = 21.4390
						and UAV1.numLeft = 2
						and UAV2.numLeft = 0 and UAV2.numRight = 2
						and UAV3.numRight = 3)
				) => 
					(time <= 3.0*T);
						
--			--Redundant with the observer below
--			lemma "Observer: Config params are not yet converged after (3 + 1/6)T":
--				(stable_config_params and not (pre(stable_config_params))) => 
--					(time <= (3.0 + 1.0/6.0)*T);

			lemma "Observer: Config params not converged after (3 + 1/6)T, but system still converges by 4T.":
				not (
					stable
					and 
					--Initially, ...
					DPSS_Node_Lib.initial_value_true(
						direction_UAV1 = 1
					and direction_UAV2 = -1
					and direction_UAV3 = -1
					and pos_UAV1 = 3.36
					and pos_UAV2 = 9.75
					and pos_UAV3 = 9.84
					and UAV1.perimLeft = 10.69
					and UAV2.perimLeft = 9.03 and UAV2.perimRight = 0.14
					and UAV3.perimRight = 17.40
					and UAV1.numLeft = 2
					and UAV2.numLeft = 2 and UAV2.numRight = 3
					and UAV3.numRight = 3
				));		
							
			lemma "Observer: Config params not yet stable after 15 steps":
				steps = 15 => stable_config_params;
				
			lemma "Observer: Not yet stable after 19 steps":
				steps >= 19 => stable;
			
				
			----------------------------------------------------------------------------
			--LEMMAS (We expect these to be true and to potentially help the model checker prove the guarantees)
			----------------------------------------------------------------------------			

			--UAV perimLeft values are nonnegative
			lemma "UAV perimLeft values are nonnegative": 
						UAV1.perimLeft >= 0.0
					and UAV2.perimLeft >= 0.0
					and UAV3.perimLeft >= 0.0;	
			
			--UAV perimRight values are nonnegative
			lemma "UAV perimRight values are nonnegative": 
						UAV1.perimRight >= 0.0
					and UAV2.perimRight >= 0.0
					and UAV3.perimRight >= 0.0;

			--UAV numLeft values are in the expected range.
			lemma "UAV1's numLeft is between 0 and 3": UAV1.numLeft >= 0 and UAV1.numLeft <= 3;
			lemma "UAV2's numLeft is between 0 and 4": UAV2.numLeft >= 0 and UAV2.numLeft <= 4;
			lemma "UAV3's numLeft is between 0 and 5": UAV3.numLeft >= 0 and UAV3.numLeft <= 5;

			--UAV numRight values are in the expected range.
			lemma "UAV1's numRight is between 0 and 5": UAV1.numRight >= 0 and UAV1.numRight <= 5;
			lemma "UAV2's numRight is between 0 and 4": UAV2.numRight >= 0 and UAV2.numRight <= 4;
			lemma "UAV3's numRight is between 0 and 3": UAV3.numRight >= 0 and UAV3.numRight <= 3;
						
			lemma "Once stable, stays stable (here 'stable' includes stability of the configuration parameters":
				true -> pre(stable)	=> stable;
				
			lemma "Once the configuration paramters are stable, they stay stable.":
				true -> pre(stable_config_params) => stable_config_params;
				
			lemma "Stable implies deltaT = T/N":
				stable => deltaT = T/N_TRUTH_REAL;
			
			lemma "deltaT is between 0 and T":
				true -> (
					deltaT > 0.0 
					and deltaT <= T
					);

			lemma "Config params stable on and after 16 steps":
				steps >= 16 => stable_config_params;
								
			lemma "Time for config params to converge is < (3 + 1/3)T":
				(stable_config_params and not (pre(stable_config_params))) => 
					(time < (3.0 + 1.0/3.0)*T);
					
			lemma "(Experimental) Time for config params to converge is < (3 + 1/4)T":
				(stable_config_params and not (pre(stable_config_params))) => 
					(time < (3.0 + 1.0/4.0)*T);
					
			lemma "(Experimental) Time for config params to converge is < (3 + 1/5)T":
				(stable_config_params and not (pre(stable_config_params))) => 
					(time < (3.0 + 1.0/5.0)*T);
			
			lemma "Stable on and after 20 steps":
				steps >= 20 => stable;
				
			-- This is a good way to find the real time bound, by experimenting with lower bounds!	
			lemma "Time to become stable is less than 4T":
				(stable and not (pre(stable))) => 
					(time < 4.0*T);
					
			lemma "Time to become stable is less than 4T + T/N":
				(stable and not (pre(stable))) => 
					(time < 4.0*T + T/N_TRUTH_REAL);
			
		**};
		
	end DPSS_3_Vehicles_AlgB.Impl;

end DPSS_3_Vehicles_AlgB_Pkg;