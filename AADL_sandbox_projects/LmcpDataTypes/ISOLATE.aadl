package ISOLATE
public
	with CMASI;
	with VICS;
	with UXCOMM;
	with ESTIMATE;

	with Data_Model;
	with Base_Types;
	with Common_Data;
	renames Common_Data::all;
    
--Lists the states of the road monitoring mission.
data State extends Base_Types::Integer
	properties
		Data_Model::Enumerators => (
			"NoState",
			"Unknown",
			"Patrol",
			"Isolate",
			"Capture",
			"Deliver",
			"Response");
end State;

data implementation State.i
end State.i;

--Detected type of intruder
data IntruderType extends Base_Types::Integer
	properties
		Data_Model::Enumerators => (
			"NoDetection",
			--historical only, use sub class for green
			"Unknown",
			"UGSDetect",
			"Dismount",
			"FourWheeledVehicle",
			"TreadedVehicle");
end IntruderType;

data implementation IntruderType.i
end IntruderType.i;

--Isolation controller reasons for termination
data IsolationTerminationReason extends Base_Types::Integer
	properties
		Data_Model::Enumerators => (
			"FalseAlarm",
			"IntruderEscape",
			"IntruderCapture");
end IsolationTerminationReason;

data implementation IsolationTerminationReason.i
end IsolationTerminationReason.i;

data PatrolTask extends CMASI::Task
end PatrolTask;

--Patrol task for establishing constant circuit visit to a set of locations
data implementation PatrolTask.i extends CMASI::Task.i
	subcomponents
		--Location of positions to visit on patrol
		VisitLocations: data CommTransferTask.i {Data_Model::Data_Representation => Array;};
end PatrolTask.i;

data UgsManagementTask extends CMASI::Task
end UgsManagementTask;

--Persistent super-task for managing sub-tasks related to patrol, isolation, capture
--and delivery. This task should be requested from the control station as the only
--task to be completed after submitting the applicable keep-in and keep-out zones.
--The AutomationRequest message that initiates the start of this task is preserved
--for all subsequent sub-tasks that are generated by this task (i.e. altitude and
--speed constraints set by the AutomationRequest and applicable zones are used to
--compute the parameters in the relevant sub-tasks).
data implementation UgsManagementTask.i extends CMASI::Task.i
	subcomponents
		--Road network and UGS locations
		UgsPlacement: data UgsLaydown.i;
		--Intended UAVs to complete this UGS Management Task
		UavID: data int64.i {Data_Model::Data_Representation => Array;};
		--Operating region ID to be considered during planning
		OperatingRegion: data int64.i;
end UgsManagementTask.i;

data StateTransition extends VICS::VicsBase
end StateTransition;

--Represents a state change during the patrol mission. During the Isolate state,
--a state transition of re-directing to a new UGS for investigation should also be
--reported as a state transition (e.g. Isolate going to UGS3, then Isolate going
--to UGS7).
data implementation StateTransition.i extends VICS::VicsBase.i
	subcomponents
		--The State that the transition event is going to.
		State: data State.i;
		--Brief description of payload data included
		PayloadDescription: data string.i;
		--Data associated with the state transition
		Payload: data PayloadData.i;
		--The ID of the Unattended Ground Sensor it is traveling to, or 0 if destination
		--is not an UGS.
		UgsID: data int64.i;
end StateTransition.i;

data IntruderAlert extends VICS::IntruderAlertBase
end IntruderAlert;

--Occurs when a UGS detects an object, aka red alert.
data implementation IntruderAlert.i extends VICS::IntruderAlertBase.i
	subcomponents
		--The location at which the object was detected.
		DetectionLocation: data Location3D.i;
		--Optional UGS ID of unit that detected the intruder. A value of 0 indicates no
		--UGS performed the detection.
		UgsID: data int64.i;
		--Type of intruder detected. If NoDetection, no need for specifying intruder speed
		--and direction
		Intruder: data IntruderType.i;
		--The speed at which the detected object is going.
		ObjectSpeed: data real32.i;
		--The direction in which the detected object is moving referenced from true north.
		ObjectDirection: data real32.i;
		--Brief description of payload data included
		PayloadDescription: data string.i;
		--This is the actual payload data. Each payload stored in row by row format.
		Payload: data PayloadData.i;
end IntruderAlert.i;

data GreenIntruderAlert extends VICS::IntruderAlertBase
end GreenIntruderAlert;

--When no measurements were made, this indicates the absence of measurements (aka
--green alert)
data implementation GreenIntruderAlert.i extends VICS::IntruderAlertBase.i
	subcomponents
		--The location at which the absence of measurements is reported
		DetectionLocation: data Location3D.i;
		--Optional UGS ID of unit that is reporting an absence of measurements
		UgsID: data int64.i;
		--Brief description of payload data included
		PayloadDescription: data string.i;
		--This is the actual payload data. Each payload stored in row by row format.
		Payload: data PayloadData.i;
end GreenIntruderAlert.i;

data FixedUGS
end FixedUGS;

--Definition of fixed UGS on a road network
data implementation FixedUGS.i
	subcomponents
		--UGS ID
		UgsID: data int64.i;
		--Location in real world coordinates
		UgsLocation: data Location3D.i;
		--Location relative to network
		UgsNetworkLocation: data NetworkLocation.i;
end FixedUGS.i;

data UgsLaydown
end UgsLaydown;

--Combined road nework and fixed UGS locations
data implementation UgsLaydown.i
	subcomponents
		--Network on which all UGS lay
		RoadNetwork: data NetworkRegion.i;
		--List of all UGS fixed to this road network
		UgsList: data FixedUGS.i {Data_Model::Data_Representation => Array;};
		--Location in real world coordinates of delivery location (VICS Central)
		DeliveryLocation: data Location3D.i;
end UgsLaydown.i;

data IsolationControllerInitialization
end IsolationControllerInitialization;

--Isolation controller initialization. Currently applied only to a single intruder
--with lower bounded speed
data implementation IsolationControllerInitialization.i
	subcomponents
		--Road network and UGS locations
		UgsPlacement: data UgsLaydown.i;
		--Lower bound on intruder speed
		IntruderSpeed: data real32.i;
end IsolationControllerInitialization.i;

data VisitUgsAndWaitCommand
end VisitUgsAndWaitCommand;

--Command the UAV(s) to fly immediately to a set of fixed UGS locations with associated
--wait times. If only a single vehicle involved, then the first on the list is to
--be visited. For multiple vehicles, an assignment is performed to assign the top
--tasks to each of the vehicles.
data implementation VisitUgsAndWaitCommand.i
	subcomponents
		--UGS Priority list
		UgsPriorityList: data UgsTimePair.i {Data_Model::Data_Representation => Array;};
end VisitUgsAndWaitCommand.i;

data UgsTimePair
end UgsTimePair;

--Ugs/Time pair
data implementation UgsTimePair.i
	subcomponents
		--UGS ID
		UgsID: data int64.i;
		--Absolute time after which intruder has passed corresponding UgsID
		UgsTime: data int64.i;
end UgsTimePair.i;

data IsolationControllerTerminated
end IsolationControllerTerminated;

--Isolation controller has determined that there has been a false alarm or intruder
--cannot be captured
data implementation IsolationControllerTerminated.i
	subcomponents
		--Reason for exiting isolation mode
		Reason: data IsolationTerminationReason.i;
end IsolationControllerTerminated.i;

data IsolationCoordination
end IsolationCoordination;

--Isolation Coordination
data implementation IsolationCoordination.i
	subcomponents
		--ID of the entity that sent this message
		SenderID: data int64.i;
		--Current alert state, i.e. mode of the UAV
		VehicleMode: data State.i;
		--Waiting for intruder, i.e. loitering about an UGS
		WaitingForIntruder: data bool.i;
		--Latest Red Alert received
		LatestRedAlert: data IntruderAlert.i;
		--Cleared child nodes
		ClearedNodes: data int64.i {Data_Model::Data_Representation => Array;};
		--EntityStates, from self/teammates, for coordination
		TeamStates: data EntityState.i {Data_Model::Data_Representation => Array;};
end IsolationCoordination.i;

data EntityAlertSummary
end EntityAlertSummary;

--Alert summary from each entity
data implementation EntityAlertSummary.i
	subcomponents
		--Entity ID
		EntityID: data int64.i;
		--Latest report reported from this entity
		LastAlert: data IntruderAlertBase.i;
		--Total number of red alerts reported from this entity
		TotalAlerts: data uint32.i;
end EntityAlertSummary.i;

data IsolationSummary
end IsolationSummary;

--Isolation Summary
data implementation IsolationSummary.i
	subcomponents
		--ID of the entity that sent this message
		SenderID: data int64.i;
		--Location of entity
		SenderLocation: data Location3D.i;
		--Speed of entity
		SenderSpeed: data real32.i;
		--Heading of entity from true North
		SenderHeading: data real32.i;
		--Entity has valid state
		ValidState: data bool.i;
		--Entity is authorized to act
		ValidAuthorization: data bool.i;
		--Summary of entities in communication (from join/exit message traffic)
		ConnectedEntities: data EntityAlertSummary.i {Data_Model::Data_Representation => Array;};
		--Current alert state, i.e. mode of the UAV
		VehicleMode: data State.i;
		--Latest Alert received
		LatestRedAlert: data IntruderAlert.i;
		--Next UGS to visit during isolation
		NextUgs: data int64.i;
		--Duration of loiter at next UGS when in isolate
		LoiterDuration: data int64.i;
		--Current time as reported by aircraft
		CurrentTime: data int64.i;
		--Current task being carried out
		CurrentTask: data int64.i;
		--Next task to be carried out
		NextTask: data int64.i;
end IsolationSummary.i;


