package PISR
public
	with CMASI;

	with Data_Model;
	with Base_Types;
	with Common_Data;
	renames Common_Data::all;
    
--selection of assignment costs
data AssignmentType extends Base_Types::Integer
	properties
		Data_Model::Enumerators => (
			"MinMaxTime",
			"MinCumlativeTime",
			"LengthConstrainedMtsp",
			"MWRRP",
			"DynamicDistributedPisr");
end AssignmentType;

data implementation AssignmentType.i
end AssignmentType.i;

data RoadSearchDirection extends Base_Types::Integer
	properties
		Data_Model::Enumerators => (
			"Forward",
			"Reverse",
			"Either");
end RoadSearchDirection;

data implementation RoadSearchDirection.i
end RoadSearchDirection.i;

data PSIR_AssignmentType
end PSIR_AssignmentType;

--Used to set the assignment type for PISR automation requests
data implementation PSIR_AssignmentType.i
	subcomponents
		--The ID of the AutomationRequest associated with this AssignmentType. The Assignment
		--Service will wait to recieve an AutomationRequest with this ID, unless the ID
		--== -1. AutomationRequestID == -1 directs the assignment service to use this AssignmentType
		--for future assignments.
		AutomationRequestID: data int64.i;
		--An AssignmentType enumeration indicating the type of assignment to be implemented.
		AssignmentType: data AssignmentType.i;
end PSIR_AssignmentType.i;

data PISR_SubTaskParameters
end PISR_SubTaskParameters;

--Parameters for Persistent Intelligence Surveillance and Reconnaissance (PISR) sub-tasks
data implementation PISR_SubTaskParameters.i
	subcomponents
		--The ID of the sub-task.
		TaskID: data int64.i;
		--The desired frequency of task completion. Note that, depending on the tasks,
		--attaining this frequency may not be possible.
		RevisitPeriod: data int64.i;
		--The maximum tolerable delay from task completion to data delivery.
		MaximumDataLatency: data int64.i;
		--The weight applied to this task relative to the other tasks.
		RelativeTaskWeight: data real32.i;
end PISR_SubTaskParameters.i;

data PISR_TaskList
end PISR_TaskList;

--List of Tasks for a Persistent Intelligence Surveillance and Reconnaissance (PISR)
--task
data implementation PISR_TaskList.i
	subcomponents
		--The list of the tasks.
		TaskList: data PISR_SubTaskParameters.i {Data_Model::Data_Representation => Array;};
		--The MWRRP Beta Parameter associated with this task list.
		Beta_MWRRP: data real32.i;
end PISR_TaskList.i;

data PISR_Task extends CMASI::Task
end PISR_Task;

--Persistent Intelligence Surveillance and Reconnaissance (PISR) task
data implementation PISR_Task.i extends CMASI::Task.i
	subcomponents
		--The list of the tasks to be performed.
		TaskList: data PISR_TaskList.i;
		--If this is true, then the tasks in the TaskList are to be executed in the order
		--given. If false, the execution order of the tasks must be determine by the PISR_Task.
		isListOrdered: data bool.i;
		--Operating region ID to be considered during planning
		OperatingRegion: data int64.i;
		--The type (PSIR_AssignmentType) of assignment to be implemented.
		AssignmentType: data AssignmentType.i;
		--This will cause the PISR task to use ProjectedActiveTimes' rather than TaskActiveTimes'
		--in cost functions, where appropriate.
		useProjectedTaskActiveTime: data bool.i;
end PISR_Task.i;

data PISR_TaskState
end PISR_TaskState;

--PISR task state
data implementation PISR_TaskState.i
	subcomponents
		--The ID of the task.
		TaskID: data int64.i;
		--last time this task was completed.
		LastCompletionTime: data int64.i;
end PISR_TaskState.i;

data ProjectedTaskActive
end ProjectedTaskActive;

--Projected time the entity will start the task
data implementation ProjectedTaskActive.i
	subcomponents
		--ID of the entity that sent this message
		SenderID: data int64.i;
		--The ID of the task.
		TaskID: data int64.i;
		--Projected time this task will become active. (ProjectedActiveTime > 0) or it
		--is invalid
		ProjectedActiveTime: data int64.i;
end ProjectedTaskActive.i;

data TimeAdvanceApproval
end TimeAdvanceApproval;

--Time Advance Approval
data implementation TimeAdvanceApproval.i
	subcomponents
		--ID of the entity that sent this message
		SenderID: data int64.i;
		--Does the sender of this message approve advancing to the next time step?
		IsTimeAdvanceApproved: data bool.i;
end TimeAdvanceApproval.i;

data DepotTask extends CMASI::Task
end DepotTask;

--Depot task
data implementation DepotTask.i extends CMASI::Task.i
	subcomponents
		--Location of the Depot
		DepotLocation: data Location3D.i;
end DepotTask.i;

data RoadSearchTask extends CMASI::SearchTask
end RoadSearchTask;

--Defines a road search task. A road search is a task that causes a vehicle to follow
--road(s) and point its sensor. The ViewAngleList determines from which direction
--the road may be viewed. View angles are specified using the {@link CMASI/Wedge}
--type. If the UseInertialViewAngles option is true, then wedges are defined in terms
--of North-East coordinates, otherwise wedges are defined relative to the line segment
--currently being viewed (a vector from point i through point i+1). To be a valid
--look angle, the road must be viewed from an angle within the bounds of the wedge.
--NOTE:: this task requires a planner that can respond to a {@link ROUTE/RoadPointsRequest},
--such as the OsmPlannerService.
data implementation RoadSearchTask.i extends CMASI::SearchTask.i
	subcomponents
		--location to start the road search
		StartingLocation: data Location3D.i;
		--location to end the road search
		EndingLocation: data Location3D.i;
		--Relative direction to search the road. Makes is possible to search the road in
		--either direction (or reverse, if that make sense)
		RoadSearchDirection: data RoadSearchDirection.i;
		--Defines a list of acceptable look-angles for this task. See the documentation
		--above for details.
		ViewAngleList: data Wedge.i {Data_Model::Data_Representation => Array;};
		--If true, the ViewAngleList specifies inertial (North-East) angles. See documentation
		--above.
		UseInertialViewAngles: data bool.i;
		--The altitude to use for line search planning. Changes the aircraft stand-off
		--from the road.
		PlaningAltitude: data uint32.i;
		--If true, the PlanningAltitude will be used. See documentation above.
		UsePlaningAltitude: data bool.i;
end RoadSearchTask.i;


