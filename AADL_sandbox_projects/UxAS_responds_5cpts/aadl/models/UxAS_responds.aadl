package UxAS_responds_pkg
public
	--Included DataTypes
    with CMASI;
    with UxAS_Node_Lib;
    with AutomationRequestValidatorService_Pkg;
    
    -- Included Main Services
	with PlanBuilderService_Pkg;	
	with TaskServiceBase_Pkg;
	with RouteAggregatorService_pkg;
	with PlannerService_Pkg;
	process UxAS_responds
    	features
    		AutomationRequest_in: in event data port cmasi::AutomationRequest.i;
    		AutomationResponse_out: out event data port cmasi::AutomationResponse.i;
    	annex agree {**

    		--Note: We do not accept a new request until the previous request has been responded to.    		
    		assume "A new AutomationRequest is not made until 
    			an AutomationResponse has been sent to the previous request.":
    		UxAS_Node_Lib.one_request_at_a_time(event(AutomationResponse_out), event(AutomationRequest_in));
    		
    		
    		-- The NUM_STEPS is determined from the anticipated number of jumps necessary to complete
    		--    a single a single Request/Response chain.
    		-- For a 5 component case, there are 5 separate messages types being passed through the system.
    		--    Each message type has a Request/Response message pair: 
    		--    > Autonmation Rq/Rs
    		--    > UniqueAutomation Rq/Rs
    		--    > TaskImplementation Rq/Rs
    		--    > Route Rq/Rs
    		--    > RoutePlan Rq/Rs
    		-- Since the chain begins with the AutomationRequest (step 0) then is the number of (message types*2)-1
    		--    that represents the expected number of steps for the return AutomationResponse to 
    		eq NUM_STEPS : int = 9;
    					
    		--Note: The UxAS_Node_Lib.responds_exactly_once_within node ignores requests received 
    		--  while processing, and does not allow "spurious" responses.
    		guarantee "(UxAS responds, 5 cpts, no errors) Upon receiving an AutomationRequest_in, 
    			UxAS responds exactly once with an AutomationResponse_out within NUM_STEPS steps.":
    			UxAS_Node_Lib.responds_exactly_once_within(
    				event(AutomationResponse_out), 
    				event(AutomationRequest_in), 
    				NUM_STEPS
    			); 
    					
    	**};
    end UxAS_responds;
    
    process implementation UxAS_responds.i
    	subcomponents
    		AutomationRequestValidator: thread AutomationRequestValidatorService_Pkg::AutomationRequestValidatorService;
    		PlanBuilder: thread PlanBuilderService_Pkg::PlanBuilderService;
    		TaskServiceBase: thread TaskServiceBase_Pkg::TaskServiceBase;
    		RouteAggregator: thread RouteAggregatorService_pkg::RouteAggregatorService;
    		Planner: thread PlannerService_Pkg::PlannerService;
    	connections
    		-- Connection between Main System and AutomationRequestValidatorService : AutomationRq/Rs message pair
    		conn001: port AutomationRequest_in -> AutomationRequestValidator.AutomationRequest_in;
    		conn002: port AutomationRequestValidator.AutomationResponse_out -> AutomationResponse_out;
    		
    		-- Connection between AutomationRequestValidatorService and PlanBuilderService : UniqueAutomationRq/Rs message pair
    		conn011: port AutomationRequestValidator.UniqueAutomationRequest_out -> PlanBuilder.UniqueAutomationRequest_in;
    	    conn012: port PlanBuilder.UniqueAutomationResponse_out -> AutomationRequestValidator.UniqueAutomationResponse_in;
    	    
    	    -- Connection between PlanBuilderService and TaskServiceBase : TaskImplementationRq/Rs message pair
    	    conn021: port PlanBuilder.TaskImplementationRequest_out -> TaskServiceBase.TaskImplementationRequest_in;
    	    conn022: port TaskServiceBase.TaskImplementationResponse_out -> PlanBuilder.TaskImplementationResponse_in;
    	    
    	    -- Connection between TaskServiceBase and RouteAggregator : Route Rq/Rs message pair
    	    conn031: port TaskServiceBase.RouteRequest_out -> RouteAggregator.RouteRequest_in;
    	    conn032: port RouteAggregator.RouteResponse_out -> TaskServiceBase.RouteResponse_in;
    	    
    	    -- Connection between RouteAggregator and Planner: RoutePlan Rq/Rs message pair
    	    conn041: port RouteAggregator.RoutePlanRequest_out -> Planner.RoutePlanRequest_in;
    	    conn042: port Planner.RoutePlanResponse_out -> RouteAggregator.RoutePlanResponse_in;
 
    	annex agree {**
    		lemma "Observe event(AutomationResponse_out)": 
    			not event(AutomationResponse_out);
    	**};
    end UxAS_responds.i;



    
end UxAS_responds_pkg;