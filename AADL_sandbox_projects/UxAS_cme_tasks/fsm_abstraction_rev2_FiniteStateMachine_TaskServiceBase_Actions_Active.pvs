fsm_abstraction_rev2_FiniteStateMachine_TaskServiceBase_Actions_Active: THEORY
BEGIN

  %|- *_TCC* : PROOF
  %|-   (skeep 1 t)(model-check)
  %|- QED

  %|- *int*_TCC* : PROOF
  %|-   (skeep 1 t)(grind)
  %|- QED

posreal_from_7pt0_to_7pt0?(n: real): bool = (n > 0) AND (7.0 <= n) AND (n <= 7.0);
posreal_from_7pt0_to_7pt0: NONEMPTY_TYPE = (posreal_from_7pt0_to_7pt0?)
  CONTAINING 7.0;

posreal_from_1pt0_to_1pt0?(n: real): bool = (n > 0) AND (1.0 <= n) AND (n <= 1.0);
posreal_from_1pt0_to_1pt0: NONEMPTY_TYPE = (posreal_from_1pt0_to_1pt0?)
  CONTAINING 1.0;

nnreal_to_1pt0?(n: real): bool = (0 <= n) AND (n <= 1.0);
nnreal_to_1pt0: NONEMPTY_TYPE = (nnreal_to_1pt0?)
  CONTAINING 0;

% Type of state

state_type: TYPE = [#
                     f_Unit_Delay: nnreal_to_1pt0
                    #];

% Type of output

out_type: TYPE = [#
                   f_NextState: real
                  #];

% Type of system state

sys_type: TYPE = [#
                   f_state: state_type,
                   f_output: out_type
                  #];

C_Constant1: posreal_from_7pt0_to_7pt0 = 7.0;

C_Constant2: posreal_from_1pt0_to_1pt0 = 1.0;

C_Constant7: posreal_from_1pt0_to_1pt0 = 1.0;

get_delay_Unit_Delay(p_state: state_type): nnreal_to_1pt0 =
  p_state`f_Unit_Delay;

set_delay_Unit_Delay(p_Constant7: posreal_from_1pt0_to_1pt0): nnreal_to_1pt0 =
  p_Constant7;

Switch2(p_Constant1: posreal_from_7pt0_to_7pt0, p_Fail_Active: bool, p_Unit_Delay: nnreal_to_1pt0): real =
  IF (p_Fail_Active) THEN
    p_Constant1
  ELSE
    p_Unit_Delay
  ENDIF;

Switch1(p_Constant2: posreal_from_1pt0_to_1pt0, p_new: real, p_Switch2: real): real =
  IF (p_new) /= 0 THEN
    p_Constant2
  ELSE
    p_Switch2
  ENDIF;

Signal_Conversion(p_Switch1: real): real =
  p_Switch1;

NextState(p_Signal_Conversion: real): real =
  p_Signal_Conversion;

% Initialize state
prepare_state(p_Unit_Delay: nnreal_to_1pt0): state_type =
  (#
    f_Unit_Delay := p_Unit_Delay
   #);

% Initialize output
prepare_output(p_NextState: real): out_type =
  (#
    f_NextState := p_NextState
   #);

% Initialize system state
init: sys_type =
  (#
    f_state := prepare_state(0),
    f_output := prepare_output(0)
   #);

% Whole system run, this can only be called after INIT and inputs setting
run(p_sys: sys_type, p_state: real, p_Fail_Active: bool, p_new: real): sys_type =
  LET v_Unit_Delay: nnreal_to_1pt0 = get_delay_Unit_Delay(p_sys`f_state) IN
  LET v_set_delay_Unit_Delay: nnreal_to_1pt0 = set_delay_Unit_Delay(C_Constant7) IN
  LET v_Switch2: real = Switch2(C_Constant1, p_Fail_Active, v_Unit_Delay) IN
  LET v_Switch1: real = Switch1(C_Constant2, p_new, v_Switch2) IN
  LET v_Signal_Conversion: real = Signal_Conversion(v_Switch1) IN
  LET v_NextState: real = NextState(v_Signal_Conversion) IN
  (#
    f_state := prepare_state(v_set_delay_Unit_Delay),
    f_output := prepare_output(v_NextState)
   #);

END fsm_abstraction_rev2_FiniteStateMachine_TaskServiceBase_Actions_Active
