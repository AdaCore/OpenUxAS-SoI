fsm_abstraction_rev2_FiniteStateMachine: THEORY
BEGIN

IMPORTING fsm_abstraction_rev2_FiniteStateMachine_TaskServiceBase;

  %|- *_TCC* : PROOF
  %|-   (skeep 1 t)(model-check)
  %|- QED

  %|- *int*_TCC* : PROOF
  %|-   (skeep 1 t)(grind)
  %|- QED

nnreal_from_0pt0_to_0pt0?(n: real): bool = (0.0 <= n) AND (n <= 0.0);
nnreal_from_0pt0_to_0pt0: NONEMPTY_TYPE = (nnreal_from_0pt0_to_0pt0?)
  CONTAINING 0.0;

nnreal_to_1?(n: real): bool = (0 <= n) AND (n <= 1);
nnreal_to_1: NONEMPTY_TYPE = (nnreal_to_1?)
  CONTAINING 0;

% Type of state

state_type: TYPE = [#
                     f_Unit_Delay2: nnreal_to_1,
                     f_TaskServiceBase_sys: fsm_abstraction_rev2_FiniteStateMachine_TaskServiceBase.sys_type,
                     f_Unit_Delay: real
                    #];

% Type of output

out_type: TYPE = [#
                   f_STATE: real
                  #];

% Type of system state

sys_type: TYPE = [#
                   f_state: state_type,
                   f_output: out_type
                  #];

C_Constant1: nnreal_from_0pt0_to_0pt0 = 0.0;

get_delay_Unit_Delay2(p_state: state_type): nnreal_to_1 =
  p_state`f_Unit_Delay2;

set_delay_Unit_Delay2(p_Constant1: nnreal_from_0pt0_to_0pt0): nnreal_to_1 =
  p_Constant1;

get_delay_Unit_Delay(p_state: state_type): real =
  p_state`f_Unit_Delay;

set_delay_Unit_Delay(p_TaskServiceBase: real): real =
  p_TaskServiceBase;

STATE(p_TaskServiceBase: real): real =
  p_TaskServiceBase;

% Initialize state
prepare_state(p_Unit_Delay2: nnreal_to_1, p_TaskServiceBase_sys: fsm_abstraction_rev2_FiniteStateMachine_TaskServiceBase.sys_type, p_Unit_Delay: real): state_type =
  (#
    f_Unit_Delay2 := p_Unit_Delay2,
    f_TaskServiceBase_sys := p_TaskServiceBase_sys,
    f_Unit_Delay := p_Unit_Delay
   #);

% Initialize output
prepare_output(p_STATE: real): out_type =
  (#
    f_STATE := p_STATE
   #);

% Initialize system state
init: sys_type =
  (#
    f_state := prepare_state(1, fsm_abstraction_rev2_FiniteStateMachine_TaskServiceBase.init, 0),
    f_output := prepare_output(0)
   #);

% Whole system run, this can only be called after INIT and inputs setting
run(p_sys: sys_type, p_fails: Demux_bustype): sys_type =
  LET v_Unit_Delay2: nnreal_to_1 = get_delay_Unit_Delay2(p_sys`f_state) IN
  LET v_Unit_Delay: real = get_delay_Unit_Delay(p_sys`f_state) IN
  LET v_set_delay_Unit_Delay2: nnreal_to_1 = set_delay_Unit_Delay2(C_Constant1) IN
  LET v_TaskServiceBase_sys: fsm_abstraction_rev2_FiniteStateMachine_TaskServiceBase.sys_type = 
    fsm_abstraction_rev2_FiniteStateMachine_TaskServiceBase.run(p_sys`f_state`f_TaskServiceBase_sys, p_fails, v_Unit_Delay2, v_Unit_Delay) IN
  LET v_set_delay_Unit_Delay: real = set_delay_Unit_Delay(v_TaskServiceBase_sys`f_output`f_STATE) IN
  LET v_STATE: real = STATE(v_TaskServiceBase_sys`f_output`f_STATE) IN
  (#
    f_state := prepare_state(v_set_delay_Unit_Delay2, v_TaskServiceBase_sys, v_set_delay_Unit_Delay),
    f_output := prepare_output(v_STATE)
   #);

END fsm_abstraction_rev2_FiniteStateMachine
